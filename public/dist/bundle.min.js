
(function(l, r) { if (!l || l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (self.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(self.document);
(function () {
  'use strict';

  function _iterableToArrayLimit(arr, i) {
    var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"];
    if (null != _i) {
      var _s,
        _e,
        _x,
        _r,
        _arr = [],
        _n = !0,
        _d = !1;
      try {
        if (_x = (_i = _i.call(arr)).next, 0 === i) {
          if (Object(_i) !== _i) return;
          _n = !1;
        } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0);
      } catch (err) {
        _d = !0, _e = err;
      } finally {
        try {
          if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return;
        } finally {
          if (_d) throw _e;
        }
      }
      return _arr;
    }
  }
  function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  function _regeneratorRuntime() {
    _regeneratorRuntime = function () {
      return exports;
    };
    var exports = {},
      Op = Object.prototype,
      hasOwn = Op.hasOwnProperty,
      defineProperty = Object.defineProperty || function (obj, key, desc) {
        obj[key] = desc.value;
      },
      $Symbol = "function" == typeof Symbol ? Symbol : {},
      iteratorSymbol = $Symbol.iterator || "@@iterator",
      asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator",
      toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
    function define(obj, key, value) {
      return Object.defineProperty(obj, key, {
        value: value,
        enumerable: !0,
        configurable: !0,
        writable: !0
      }), obj[key];
    }
    try {
      define({}, "");
    } catch (err) {
      define = function (obj, key, value) {
        return obj[key] = value;
      };
    }
    function wrap(innerFn, outerFn, self, tryLocsList) {
      var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator,
        generator = Object.create(protoGenerator.prototype),
        context = new Context(tryLocsList || []);
      return defineProperty(generator, "_invoke", {
        value: makeInvokeMethod(innerFn, self, context)
      }), generator;
    }
    function tryCatch(fn, obj, arg) {
      try {
        return {
          type: "normal",
          arg: fn.call(obj, arg)
        };
      } catch (err) {
        return {
          type: "throw",
          arg: err
        };
      }
    }
    exports.wrap = wrap;
    var ContinueSentinel = {};
    function Generator() {}
    function GeneratorFunction() {}
    function GeneratorFunctionPrototype() {}
    var IteratorPrototype = {};
    define(IteratorPrototype, iteratorSymbol, function () {
      return this;
    });
    var getProto = Object.getPrototypeOf,
      NativeIteratorPrototype = getProto && getProto(getProto(values([])));
    NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);
    var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
    function defineIteratorMethods(prototype) {
      ["next", "throw", "return"].forEach(function (method) {
        define(prototype, method, function (arg) {
          return this._invoke(method, arg);
        });
      });
    }
    function AsyncIterator(generator, PromiseImpl) {
      function invoke(method, arg, resolve, reject) {
        var record = tryCatch(generator[method], generator, arg);
        if ("throw" !== record.type) {
          var result = record.arg,
            value = result.value;
          return value && "object" == typeof value && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) {
            invoke("next", value, resolve, reject);
          }, function (err) {
            invoke("throw", err, resolve, reject);
          }) : PromiseImpl.resolve(value).then(function (unwrapped) {
            result.value = unwrapped, resolve(result);
          }, function (error) {
            return invoke("throw", error, resolve, reject);
          });
        }
        reject(record.arg);
      }
      var previousPromise;
      defineProperty(this, "_invoke", {
        value: function (method, arg) {
          function callInvokeWithMethodAndArg() {
            return new PromiseImpl(function (resolve, reject) {
              invoke(method, arg, resolve, reject);
            });
          }
          return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
        }
      });
    }
    function makeInvokeMethod(innerFn, self, context) {
      var state = "suspendedStart";
      return function (method, arg) {
        if ("executing" === state) throw new Error("Generator is already running");
        if ("completed" === state) {
          if ("throw" === method) throw arg;
          return doneResult();
        }
        for (context.method = method, context.arg = arg;;) {
          var delegate = context.delegate;
          if (delegate) {
            var delegateResult = maybeInvokeDelegate(delegate, context);
            if (delegateResult) {
              if (delegateResult === ContinueSentinel) continue;
              return delegateResult;
            }
          }
          if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) {
            if ("suspendedStart" === state) throw state = "completed", context.arg;
            context.dispatchException(context.arg);
          } else "return" === context.method && context.abrupt("return", context.arg);
          state = "executing";
          var record = tryCatch(innerFn, self, context);
          if ("normal" === record.type) {
            if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue;
            return {
              value: record.arg,
              done: context.done
            };
          }
          "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg);
        }
      };
    }
    function maybeInvokeDelegate(delegate, context) {
      var methodName = context.method,
        method = delegate.iterator[methodName];
      if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method")), ContinueSentinel;
      var record = tryCatch(method, delegate.iterator, context.arg);
      if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel;
      var info = record.arg;
      return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel);
    }
    function pushTryEntry(locs) {
      var entry = {
        tryLoc: locs[0]
      };
      1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);
    }
    function resetTryEntry(entry) {
      var record = entry.completion || {};
      record.type = "normal", delete record.arg, entry.completion = record;
    }
    function Context(tryLocsList) {
      this.tryEntries = [{
        tryLoc: "root"
      }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0);
    }
    function values(iterable) {
      if (iterable) {
        var iteratorMethod = iterable[iteratorSymbol];
        if (iteratorMethod) return iteratorMethod.call(iterable);
        if ("function" == typeof iterable.next) return iterable;
        if (!isNaN(iterable.length)) {
          var i = -1,
            next = function next() {
              for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next;
              return next.value = undefined, next.done = !0, next;
            };
          return next.next = next;
        }
      }
      return {
        next: doneResult
      };
    }
    function doneResult() {
      return {
        value: undefined,
        done: !0
      };
    }
    return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", {
      value: GeneratorFunctionPrototype,
      configurable: !0
    }), defineProperty(GeneratorFunctionPrototype, "constructor", {
      value: GeneratorFunction,
      configurable: !0
    }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) {
      var ctor = "function" == typeof genFun && genFun.constructor;
      return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name));
    }, exports.mark = function (genFun) {
      return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun;
    }, exports.awrap = function (arg) {
      return {
        __await: arg
      };
    }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
      return this;
    }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
      void 0 === PromiseImpl && (PromiseImpl = Promise);
      var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
      return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {
        return result.done ? result.value : iter.next();
      });
    }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () {
      return this;
    }), define(Gp, "toString", function () {
      return "[object Generator]";
    }), exports.keys = function (val) {
      var object = Object(val),
        keys = [];
      for (var key in object) keys.push(key);
      return keys.reverse(), function next() {
        for (; keys.length;) {
          var key = keys.pop();
          if (key in object) return next.value = key, next.done = !1, next;
        }
        return next.done = !0, next;
      };
    }, exports.values = values, Context.prototype = {
      constructor: Context,
      reset: function (skipTempReset) {
        if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined);
      },
      stop: function () {
        this.done = !0;
        var rootRecord = this.tryEntries[0].completion;
        if ("throw" === rootRecord.type) throw rootRecord.arg;
        return this.rval;
      },
      dispatchException: function (exception) {
        if (this.done) throw exception;
        var context = this;
        function handle(loc, caught) {
          return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught;
        }
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i],
            record = entry.completion;
          if ("root" === entry.tryLoc) return handle("end");
          if (entry.tryLoc <= this.prev) {
            var hasCatch = hasOwn.call(entry, "catchLoc"),
              hasFinally = hasOwn.call(entry, "finallyLoc");
            if (hasCatch && hasFinally) {
              if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
              if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
            } else if (hasCatch) {
              if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
            } else {
              if (!hasFinally) throw new Error("try statement without catch or finally");
              if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
            }
          }
        }
      },
      abrupt: function (type, arg) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
            var finallyEntry = entry;
            break;
          }
        }
        finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);
        var record = finallyEntry ? finallyEntry.completion : {};
        return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);
      },
      complete: function (record, afterLoc) {
        if ("throw" === record.type) throw record.arg;
        return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;
      },
      finish: function (finallyLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;
        }
      },
      catch: function (tryLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          if (entry.tryLoc === tryLoc) {
            var record = entry.completion;
            if ("throw" === record.type) {
              var thrown = record.arg;
              resetTryEntry(entry);
            }
            return thrown;
          }
        }
        throw new Error("illegal catch attempt");
      },
      delegateYield: function (iterable, resultName, nextLoc) {
        return this.delegate = {
          iterator: values(iterable),
          resultName: resultName,
          nextLoc: nextLoc
        }, "next" === this.method && (this.arg = undefined), ContinueSentinel;
      }
    }, exports;
  }
  function _typeof(obj) {
    "@babel/helpers - typeof";

    return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
      return typeof obj;
    } : function (obj) {
      return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    }, _typeof(obj);
  }
  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
      var info = gen[key](arg);
      var value = info.value;
    } catch (error) {
      reject(error);
      return;
    }
    if (info.done) {
      resolve(value);
    } else {
      Promise.resolve(value).then(_next, _throw);
    }
  }
  function _asyncToGenerator(fn) {
    return function () {
      var self = this,
        args = arguments;
      return new Promise(function (resolve, reject) {
        var gen = fn.apply(self, args);
        function _next(value) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
        }
        function _throw(err) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
        }
        _next(undefined);
      });
    };
  }
  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
    }
  }
  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    Object.defineProperty(Constructor, "prototype", {
      writable: false
    });
    return Constructor;
  }
  function _defineProperty(obj, key, value) {
    key = _toPropertyKey(key);
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    Object.defineProperty(subClass, "prototype", {
      writable: false
    });
    if (superClass) _setPrototypeOf(subClass, superClass);
  }
  function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
      return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _getPrototypeOf(o);
  }
  function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
      o.__proto__ = p;
      return o;
    };
    return _setPrototypeOf(o, p);
  }
  function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;
    try {
      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      return true;
    } catch (e) {
      return false;
    }
  }
  function _construct(Parent, args, Class) {
    if (_isNativeReflectConstruct()) {
      _construct = Reflect.construct.bind();
    } else {
      _construct = function _construct(Parent, args, Class) {
        var a = [null];
        a.push.apply(a, args);
        var Constructor = Function.bind.apply(Parent, a);
        var instance = new Constructor();
        if (Class) _setPrototypeOf(instance, Class.prototype);
        return instance;
      };
    }
    return _construct.apply(null, arguments);
  }
  function _isNativeFunction(fn) {
    return Function.toString.call(fn).indexOf("[native code]") !== -1;
  }
  function _wrapNativeSuper(Class) {
    var _cache = typeof Map === "function" ? new Map() : undefined;
    _wrapNativeSuper = function _wrapNativeSuper(Class) {
      if (Class === null || !_isNativeFunction(Class)) return Class;
      if (typeof Class !== "function") {
        throw new TypeError("Super expression must either be null or a function");
      }
      if (typeof _cache !== "undefined") {
        if (_cache.has(Class)) return _cache.get(Class);
        _cache.set(Class, Wrapper);
      }
      function Wrapper() {
        return _construct(Class, arguments, _getPrototypeOf(this).constructor);
      }
      Wrapper.prototype = Object.create(Class.prototype, {
        constructor: {
          value: Wrapper,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
      return _setPrototypeOf(Wrapper, Class);
    };
    return _wrapNativeSuper(Class);
  }
  function _assertThisInitialized(self) {
    if (self === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self;
  }
  function _possibleConstructorReturn(self, call) {
    if (call && (typeof call === "object" || typeof call === "function")) {
      return call;
    } else if (call !== void 0) {
      throw new TypeError("Derived constructors may only return object or undefined");
    }
    return _assertThisInitialized(self);
  }
  function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();
    return function _createSuperInternal() {
      var Super = _getPrototypeOf(Derived),
        result;
      if (hasNativeReflectConstruct) {
        var NewTarget = _getPrototypeOf(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return _possibleConstructorReturn(this, result);
    };
  }
  function _superPropBase(object, property) {
    while (!Object.prototype.hasOwnProperty.call(object, property)) {
      object = _getPrototypeOf(object);
      if (object === null) break;
    }
    return object;
  }
  function _get() {
    if (typeof Reflect !== "undefined" && Reflect.get) {
      _get = Reflect.get.bind();
    } else {
      _get = function _get(target, property, receiver) {
        var base = _superPropBase(target, property);
        if (!base) return;
        var desc = Object.getOwnPropertyDescriptor(base, property);
        if (desc.get) {
          return desc.get.call(arguments.length < 3 ? target : receiver);
        }
        return desc.value;
      };
    }
    return _get.apply(this, arguments);
  }
  function _slicedToArray(arr, i) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
  }
  function _toArray(arr) {
    return _arrayWithHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableRest();
  }
  function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
  }
  function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
  }
  function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
  }
  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
    return arr2;
  }
  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _createForOfIteratorHelper(o, allowArrayLike) {
    var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
    if (!it) {
      if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
        if (it) o = it;
        var i = 0;
        var F = function () {};
        return {
          s: F,
          n: function () {
            if (i >= o.length) return {
              done: true
            };
            return {
              done: false,
              value: o[i++]
            };
          },
          e: function (e) {
            throw e;
          },
          f: F
        };
      }
      throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    var normalCompletion = true,
      didErr = false,
      err;
    return {
      s: function () {
        it = it.call(o);
      },
      n: function () {
        var step = it.next();
        normalCompletion = step.done;
        return step;
      },
      e: function (e) {
        didErr = true;
        err = e;
      },
      f: function () {
        try {
          if (!normalCompletion && it.return != null) it.return();
        } finally {
          if (didErr) throw err;
        }
      }
    };
  }
  function _toPrimitive(input, hint) {
    if (typeof input !== "object" || input === null) return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== undefined) {
      var res = prim.call(input, hint || "default");
      if (typeof res !== "object") return res;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
  }
  function _toPropertyKey(arg) {
    var key = _toPrimitive(arg, "string");
    return typeof key === "symbol" ? key : String(key);
  }

  //document.adoptedStyleSheets.push(css);
  var FilmStrip = /*#__PURE__*/function (_HTMLElement) {
    _inherits(FilmStrip, _HTMLElement);
    var _super = _createSuper(FilmStrip);
    function FilmStrip() {
      var _this;
      var images = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;
      var info = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
      var selectedImageNum = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;
      var tabs = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];
      _classCallCheck(this, FilmStrip);
      _this = _super.call(this);
      _defineProperty(_assertThisInitialized(_this), "images", []);
      _defineProperty(_assertThisInitialized(_this), "tabs", []);
      _defineProperty(_assertThisInitialized(_this), "info", undefined);
      _defineProperty(_assertThisInitialized(_this), "selectedImageNum", undefined);
      _defineProperty(_assertThisInitialized(_this), "container", undefined);
      _defineProperty(_assertThisInitialized(_this), "list", undefined);
      _defineProperty(_assertThisInitialized(_this), "tabContainer", undefined);
      _defineProperty(_assertThisInitialized(_this), "listElements", []);
      _this.addEventListener("wheel", _this._onScroll, {
        passive: false
      });
      _this.setImages(images);
      _this.setInfo(info);
      _this.setTabs(tabs);
      _this.selectedImageNum = selectedImageNum;
      _this.render();
      return _this;
    }
    _createClass(FilmStrip, [{
      key: "setTabs",
      value: function setTabs(tabs) {
        this.tabs = tabs;
      }
    }, {
      key: "setImages",
      value: function setImages(images) {
        this.images = images;
      }
    }, {
      key: "setInfo",
      value: function setInfo(info) {
        this.info = info;
      }
    }, {
      key: "getInfo",
      value: function getInfo() {
        return this.info;
      }
    }, {
      key: "select",
      value: function select(selectedImageNum) {
        if (this.selectedImageNum !== undefined) {
          this.listElements[this.selectedImageNum].classList.remove('selected');
        }
        var el = this.listElements[selectedImageNum];
        if (el) {
          var itemsVisible = this.list.clientWidth / this.listElements[selectedImageNum].clientWidth || 1;
          var itemWidth = el.clientWidth;
          var paddingOffset = this.listElements[0].offsetLeft;
          ({
            x1: el.offsetLeft,
            x2: el.offsetLeft + itemWidth
          });
          this.list.scrollTo((selectedImageNum - itemsVisible / 2 + 1) * itemWidth - paddingOffset, 0);
          this.listElements[selectedImageNum].classList.add('selected');
          this.selectedImageNum = selectedImageNum;
        } else {
          this.list.scrollTo(0, 0);
        }
        this.updateTabs();
      }
    }, {
      key: "_onScroll",
      value: function _onScroll(event) {
        event.preventDefault();
        this.list.scrollTo(this.list.scrollLeft + event.deltaY, 0);
      }
    }, {
      key: "_onSelectImage",
      value: function _onSelectImage(event, selectedImage, selectedImageNum) {
        if (this.onSelectImage) {
          this.onSelectImage(event, selectedImage, selectedImageNum);
        }
        this.select(selectedImageNum);
      }
    }, {
      key: "_onSelectTab",
      value: function _onSelectTab(event, selectedTab, selectedTabNum) {
        console.log("tab selected", selectedTab, selectedTabNum);
        if (this.onSelectTab) {
          this.onSelectTab(event, selectedTab, selectedTabNum);
        }
      }
    }, {
      key: "createFilmStripItems",
      value: function createFilmStripItems(items) {
        var _this2 = this;
        var ul = document.createElement('ul');
        var _loop = function _loop(i) {
          var _items$i, _items$i3;
          var li = document.createElement('li');
          if (_this2.selectedImageNum === i) {
            li.classList.add('selected');
          } else {
            li.classList.remove('selected');
          }
          var img = document.createElement('img');
          if ((_items$i = items[i]) !== null && _items$i !== void 0 && _items$i.size && Array.isArray(items[i].size)) {
            img.src = items[i].size[items[i].size.length - 1];
          } else {
            var _items$i2;
            img.src = ((_items$i2 = items[i]) === null || _items$i2 === void 0 ? void 0 : _items$i2.src) || items[i];
          }
          img.addEventListener("click", function (event) {
            return _this2._onSelectImage(event, items[i], i);
          });
          if ((_items$i3 = items[i]) !== null && _items$i3 !== void 0 && _items$i3.title) {
            img.setAttribute('title', items[i].title);
          }
          li.appendChild(img);
          _this2.listElements[i] = li;
          ul.appendChild(li);
        };
        for (var i = 0; i < items.length; i++) {
          _loop(i);
        }
        return ul;
      }
    }, {
      key: "updateTabs",
      value: function updateTabs() {
        var _this3 = this;
        var tabs = this.tabs;
        if (this.tabContainer) {
          this.tabContainer.innerHTML = '';
        }
        if (tabs.length < 1) {
          var _this$info, _this$info2;
          tabs = [{
            title: (_this$info = this.info) === null || _this$info === void 0 ? void 0 : _this$info.description,
            caption: (_this$info2 = this.info) === null || _this$info2 === void 0 ? void 0 : _this$info2.title
          }];
        }
        var _loop2 = function _loop2(i) {
          var tab = tabs[i];
          var el = document.createElement('div');
          el.classList.add('tab', i);
          if (tab["class"]) {
            el.classList.add(tab["class"]);
          }
          el.innerHTML = tab.caption || tab.name || tab.title || i;
          el.setAttribute('title', tab.title || tab.caption || tab.name || i);
          el.addEventListener('click', function (event) {
            _this3._onSelectTab(event, tab, i);
          });
          _this3.tabContainer.appendChild(el);
        };
        for (var i = 0; i < tabs.length; i++) {
          _loop2(i);
        }
      }
    }, {
      key: "render",
      value: function render() {
        var div = document.createElement('div');
        div.classList.add('filmStripContainer');
        var ul = this.createFilmStripItems(this.images);
        div.appendChild(ul);

        /* Current Album Tab */
        this.tabContainer = document.createElement('div');
        this.tabContainer.classList.add('tabContainer');
        this.updateTabs();
        div.appendChild(this.tabContainer);
        this.replaceChildren(div);
        this.list = ul;
        this.container = div;
      }
    }]);
    return FilmStrip;
  }( /*#__PURE__*/_wrapNativeSuper(HTMLElement));
  customElements.define('film-strip', FilmStrip);

  var AlbumStrip = /*#__PURE__*/function (_FilmStrip) {
    _inherits(AlbumStrip, _FilmStrip);
    var _super = _createSuper(AlbumStrip);
    function AlbumStrip() {
      var _this;
      var albums = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;
      var selectedImageNum = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
      var selectedAlbumNum = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;
      _classCallCheck(this, AlbumStrip);
      _this = _super.call(this, undefined, undefined, selectedImageNum);
      _defineProperty(_assertThisInitialized(_this), "albums", undefined);
      _defineProperty(_assertThisInitialized(_this), "selectedAlbumNum", undefined);
      _this.setAlbums(albums);
      _this.selectedAlbumNum = selectedAlbumNum;
      _this.selectedImageNum = selectedImageNum;
      _this.render();
      return _this;
    }
    _createClass(AlbumStrip, [{
      key: "setAlbums",
      value: function setAlbums(albums) {
        this.albums = albums;
      }
    }, {
      key: "select",
      value: function select() {
        var imageNum = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;
        var albumNum = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
        if (albumNum !== this.selectedAlbumNum) {
          this.selectedAlbumNum = albumNum;
          this.render();
        }
        _get(_getPrototypeOf(AlbumStrip.prototype), "select", this).call(this, imageNum);
      }
    }, {
      key: "getAlbum",
      value: function getAlbum(albumNum) {
        var _this$albums;
        if (albumNum === undefined) {
          albumNum = this.selectedAlbumNum;
        }
        return (_this$albums = this.albums) === null || _this$albums === void 0 ? void 0 : _this$albums[albumNum];
      }
    }, {
      key: "_onSelectImage",
      value: function _onSelectImage(event, selectedImage, selectedImageNum) {
        if (selectedImage.photoset !== undefined) {
          /* selection from album overview */
          this.select(selectedImage.titleImageNum, selectedImage.photoset);
        } else {
          /* selection from within a set */
          this.select(selectedImageNum, this.selectedAlbumNum);
        }
        if (this.onSelectImage) {
          this.onSelectImage(event, this.selectedImageNum, this.selectedAlbumNum);
        }
      }
    }, {
      key: "_onSelectTab",
      value: function _onSelectTab(event, tab, tabNum) {
        if (tabNum === 0) {
          this.select(undefined, undefined);
        }
      }
    }, {
      key: "updateTabs",
      value: function updateTabs() {
        var album = this.getAlbum();
        var tabs = [{
          name: 'Albums',
          title: 'Browse existing albums'
        }];
        if (album) {
          var _album$photos;
          tabs.push({
            name: album.title,
            "class": 'currentAlbum',
            title: album.description || album.title
          });
          var photo = (_album$photos = album.photos) === null || _album$photos === void 0 ? void 0 : _album$photos[this.selectedImageNum];
          if (photo) {
            tabs.push({
              name: photo.title,
              "class": 'currentImage',
              title: photo.description || photo.title
            });
          }
        }
        this.setTabs(tabs);
        _get(_getPrototypeOf(AlbumStrip.prototype), "updateTabs", this).call(this);
      }
    }, {
      key: "render",
      value: function render() {
        var album = this.getAlbum();
        if (album) {
          if (this.images !== album.photos) {
            this.images = album.photos;
          }
        } else if (this.albums) {
          /* show album selection page if no album is selected */
          this.images = this.getAlbumTitleImages();
        }
        if (this.images) {
          _get(_getPrototypeOf(AlbumStrip.prototype), "render", this).call(this);
        } else {
          console.error("AlbumStrip: No available Images to render");
        }
      }
    }, {
      key: "getAlbumList",
      value: function getAlbumList() {
        var albums = [];
        for (var i = 0; i < this.albums.length; i++) {
          var album = this.albums[i];
          for (var p = 0; p < album.photos.length; p++) {
            if (album.photos[p].id === album.primary) {
              album.titleImage = album.photos[p];
              album.titleImageNum = p;
            }
          }
          if (album.titleImage === undefined) {
            /* use first album image as title image if primary album image is not present (e.g. because it has been filtered out) */
            album.titleImage = album.photos[0];
            album.titleImageNum = 0;
          }
          albums.push(album);
        }
        return albums;
      }
    }, {
      key: "getAlbumTitleImages",
      value: function getAlbumTitleImages() {
        var albums = this.getAlbumList();
        var images = [];
        for (var i = 0; i < albums.length; i++) {
          var img = albums[i].titleImage;
          img.photoset = i;
          img.photosetTitle = albums[i].title;
          img.titleImageNum = albums[i].titleImageNum;
          images.push(img);
        }
        return images;
      }
    }]);
    return AlbumStrip;
  }(FilmStrip);
  customElements.define('album-strip', AlbumStrip);

  var TagsUL = /*#__PURE__*/function (_HTMLElement) {
    _inherits(TagsUL, _HTMLElement);
    var _super = _createSuper(TagsUL);
    function TagsUL() {
      var _this;
      var listItems = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;
      _classCallCheck(this, TagsUL);
      _this = _super.call(this);
      _defineProperty(_assertThisInitialized(_this), "listItems", undefined);
      _this.listItems = listItems;
      _this.render();
      return _this;
    }
    _createClass(TagsUL, [{
      key: "render",
      value: function render() {
        var _this2 = this;
        var listItems = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;
        listItems = listItems || this.listItems;
        var _loop = function _loop() {
          if (listItems[key]) {
            var li = document.createElement('li');
            li.classList.add(key);
            var div = document.createElement('div');
            div.classList.add('label');
            var span = document.createElement('span');
            span.innerHTML = key;
            div.appendChild(span);
            li.appendChild(div);
            div = document.createElement('div');
            div.classList.add('value');
            if (!Array.isArray(listItems[key])) {
              listItems[key] = [listItems[key]];
            }
            listItems[key].forEach(function (item) {
              if (item instanceof Element) {
                div.appendChild(item);
              } else {
                span = document.createElement('span');
                span.innerHTML = item;
                div.appendChild(span);
              }
            });
            li.appendChild(div);
            _this2.appendChild(li);
          }
        };
        for (var key in listItems) {
          _loop();
        }
      }
    }]);
    return TagsUL;
  }( /*#__PURE__*/_wrapNativeSuper(HTMLElement));
  customElements.define('ul-tags', TagsUL);

  var Dispatcher = /*#__PURE__*/function () {
    function Dispatcher(context) {
      var listeners = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
      _classCallCheck(this, Dispatcher);
      _defineProperty(this, "context", undefined);
      _defineProperty(this, "listeners", undefined);
      this.setContext(context);
      if (listeners) {
        this.setListeners(listeners);
        this.init();
      }
    }
    _createClass(Dispatcher, [{
      key: "setContext",
      value: function setContext(context) {
        this.context = context;
      }
    }, {
      key: "setListeners",
      value: function setListeners(listeners) {
        this.listeners = listeners;
      }
    }, {
      key: "destroy",
      value: function destroy() {}
    }, {
      key: "init",
      value: function init() {
        var _this = this;
        var destroy = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
        var listeners = this.listeners;
        var action = destroy === true ? 'removeEventListener' : 'addEventListener';
        if (Array.isArray(listeners)) ; else {
          for (var _i = 0, _Object$keys = Object.keys(listeners); _i < _Object$keys.length; _i++) {
            var node = _Object$keys[_i];
            var list = listeners[node];
            var nodeObj = void 0;
            switch (node) {
              case 'document':
                nodeObj = document;
                break;
              case 'window':
                nodeObj = window;
                break;
              default:
                nodeObj = document.querySelector(node);
            }
            var _iterator = _createForOfIteratorHelper(list),
              _step;
            try {
              var _loop = function _loop() {
                var event = _step.value;
                if (Array.isArray(event)) {
                  nodeObj[action](event[0].toLowerCase(), function (e) {
                    return _this.fire(event[1], e);
                  });
                } else {
                  nodeObj[action](event.toLowerCase(), function (e) {
                    return _this.fire(event, e);
                  });
                }
              };
              for (_iterator.s(); !(_step = _iterator.n()).done;) {
                _loop();
              }
            } catch (err) {
              _iterator.e(err);
            } finally {
              _iterator.f();
            }
          }
        }
        this.listeners = listeners;
      }
    }, {
      key: "fire",
      value: function fire(eventName) {
        var callbackName = 'on' + eventName;
        var internalCallbackName = '_on' + eventName;
        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }
        if (typeof this.context.onEvent === 'function') {
          var _this$context;
          (_this$context = this.context).onEvent.apply(_this$context, [eventName].concat(args));
        }
        if (typeof this.context[internalCallbackName] === 'function') {
          var _this$context2;
          (_this$context2 = this.context)[internalCallbackName].apply(_this$context2, args);
        }
        if (typeof this.context[callbackName] === 'function') {
          var _this$context3;
          (_this$context3 = this.context)[callbackName].apply(_this$context3, args);
        }
      }
    }]);
    return Dispatcher;
  }();

  var DragonSwipe = /*#__PURE__*/function () {
    function DragonSwipe() {
      var element = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;
      _classCallCheck(this, DragonSwipe);
      _defineProperty(this, "dispatcher", void 0);
      _defineProperty(this, "element", void 0);
      _defineProperty(this, "listeners", {
        document: ['TouchStart', 'TouchEnd', 'TouchCancel', 'MouseDown', 'MouseUp']
      });
      _defineProperty(this, "touches", []);
      _defineProperty(this, "mouse", {});
      this.dispatcher = new Dispatcher(this, this.listeners);
      console.log("Dragon", this.dispatcher);
      this.element = typeof element === 'string' ? document.querySelector(element) : element;
    }
    _createClass(DragonSwipe, [{
      key: "getTouchNum",
      value: function getTouchNum(id) {
        for (var i = 0; i < touches.length; i++) {
          if (touches[i].id === id) {
            return i;
          }
        }
      }
    }, {
      key: "_onMouseDown",
      value: function _onMouseDown(event) {
        this.mouse = {
          x: event.x,
          y: event.y,
          t: event.timeStamp,
          target: event.target
        };
        this.dispatcher.fire('MouseStart', this.mouse, event);
      }
    }, {
      key: "_onMouseUp",
      value: function _onMouseUp(event) {
        this.mouse.x2 = event.x;
        this.mouse.y2 = event.y;
        this.mouse.t2 = event.timeStamp;
        this.mouse.dx = this.mouse.x2 - this.mouse.x;
        this.mouse.dy = this.mouse.y2 - this.mouse.y;
        this.mouse.dt = this.mouse.t2 - this.mouse.t;
        this.dispatcher.fire('MouseEnd', this.mouse, event);
      }
    }, {
      key: "_onTouchStart",
      value: function _onTouchStart(event) {
        var ct = event.changedTouches;
        for (var i = 0; i < ct.length; i++) {
          var t = ct[i];
          this.touches.push({
            id: t.identifier,
            x: i.pageX,
            y: i.pageY,
            target: event.target,
            t: event.timeStamp
          });
          console.log(this.touches.length, t.identifier);
          if (this.touches.length === 1) {
            this.dispatcher.fire('FirstTouch', t, event);
          }
        }
      }
    }, {
      key: "_onTouchEnd",
      value: function _onTouchEnd(event) {
        var ct = event.changedTouches;
        console.log("_onTouchEnd", ct.length);
        for (var i = 0; i < ct.length; i++) {
          var t = ct[i];
          var idx = this.getTouchNum(t.identifier);
          var old = this.touches[idx];
          console.log("_onTouchEnd", i, idx, old);
          console.log(this.touches.length, t.identifier);
          if (this.touches.length === 1) {
            this.dispatcher.fire('LastTouch', {
              x: old.x,
              y: old.y,
              x2: t.pageX,
              y2: t.pageY,
              dx: t.pageX - old.x,
              dy: t.pageY - old.y,
              t: old.t,
              t2: t.timeStamp,
              dt: t.timeStamp - old.t
            }, event);
          }
          this.touches.splice(idx, 1);
        }
      }
    }, {
      key: "_onTouchCancel",
      value: function _onTouchCancel(event) {
        var ct = event.changedTouches;
        for (var i = 0; i < ct.length; i++) {
          var idx = this.getTouchNum(ct[i].identifier);
          this.touches.splice(idx, 1);
        }
      }
    }]);
    return DragonSwipe;
  }();

  //document.adoptedStyleSheets.push(css);
  var Gallery = /*#__PURE__*/function (_HTMLElement) {
    _inherits(Gallery, _HTMLElement);
    var _super = _createSuper(Gallery);
    function Gallery() {
      var _this;
      var albums = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;
      var preferences = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
      _classCallCheck(this, Gallery);
      _this = _super.call(this);
      /* namespaces */
      _defineProperty(_assertThisInitialized(_this), "svgNS", "http://www.w3.org/2000/svg");
      _defineProperty(_assertThisInitialized(_this), "meta", {
        title: "Chameleon | Image Gallery",
        delimiter: " | "
      });
      /* USER SETTINGS */
      _defineProperty(_assertThisInitialized(_this), "preferences", {
        breakTimeDuration: 10,
        /* slideshow duration in seconds */
        userIdleTimeDuration: 7.5,
        /* slideshow will not continue before user idle Time exceeds this threshold */
        transitionDuration: 2,
        showCursorDuration: 10,
        /* hide the mouse cursor after x seconds */
        filters: {
          safety: ["0", "1"]
        },
        /* filter NSFW- (adult-) content. 0 = safe for work content, 1 = moderate adult content, 2 = explicit content */
        width: undefined,
        height: undefined,
        direction: "random",
        fps: 20,
        pauseMode: "smooth",
        imgStyle: {
          marginLeft: 'auto',
          marginRight: 'auto',
          objectFit: 'contain',
          width: '100%',
          height: '100%',
          position: 'absolute',
          top: 0,
          left: 0,
          alignment: {
            x: 0.5,
            y: 0.5 /* 0 = left, 0.5 = center, 1 = right */
          }
        },
        imgLayerStyle: {
          opacity: 0,
          position: 'absolute',
          top: 0,
          left: 0,
          right: 0,
          bottom: 0,
          backgroundColor: 'rgba(0,0,0,1)'
        },
        changeAlbumOnImageNumOverflow: true /* specifies how to treat exceeding image index: select previous/next album (true) or start over at the other end of the current album (false) */
      });
      /* transition variables */
      _defineProperty(_assertThisInitialized(_this), "transitionFrame", 0);
      _defineProperty(_assertThisInitialized(_this), "breakTimeFrame", 0);
      _defineProperty(_assertThisInitialized(_this), "totalFrames", 0);
      _defineProperty(_assertThisInitialized(_this), "suspended", false);
      /* "suspend" prevents premature state changes during transitions or while images are loading */
      /* internal control variables */
      _defineProperty(_assertThisInitialized(_this), "afterTransition", undefined);
      /* function */
      _defineProperty(_assertThisInitialized(_this), "workload", 0);
      /* calculates the current workload */
      _defineProperty(_assertThisInitialized(_this), "timer", [Date.now()]);
      _defineProperty(_assertThisInitialized(_this), "keysPressed", []);
      _defineProperty(_assertThisInitialized(_this), "paused", false);
      /* user pause state */
      _defineProperty(_assertThisInitialized(_this), "userIdleTime", 0);
      _defineProperty(_assertThisInitialized(_this), "pureMode", false);
      _defineProperty(_assertThisInitialized(_this), "firstRun", true);
      _defineProperty(_assertThisInitialized(_this), "userMove", {});
      /* gallery image storage */
      _defineProperty(_assertThisInitialized(_this), "albums", []);
      _defineProperty(_assertThisInitialized(_this), "img", []);
      _defineProperty(_assertThisInitialized(_this), "imageLayersMax", 3);
      _defineProperty(_assertThisInitialized(_this), "imageContainer", void 0);
      _defineProperty(_assertThisInitialized(_this), "previousImage", undefined);
      _defineProperty(_assertThisInitialized(_this), "currentImageNum", 0);
      _defineProperty(_assertThisInitialized(_this), "currentAlbumNum", 0);
      /* canvas elements */
      _defineProperty(_assertThisInitialized(_this), "canvasContainer", undefined);
      _defineProperty(_assertThisInitialized(_this), "canvas", undefined);
      _defineProperty(_assertThisInitialized(_this), "mask", undefined);
      _defineProperty(_assertThisInitialized(_this), "imageInfoBox", undefined);
      _defineProperty(_assertThisInitialized(_this), "filmStrip", undefined);
      /* Event Listeners */
      _defineProperty(_assertThisInitialized(_this), "dispatcher", undefined);
      _defineProperty(_assertThisInitialized(_this), "listeners", {
        document: ['MouseMove', 'KeyUp', 'KeyDown'],
        window: ['Resize', ['orientationchange', 'Resize'], 'Offline', 'Online']
      });
      /* overlays */
      _defineProperty(_assertThisInitialized(_this), "overlays", {
        imageInfoBox: {
          autostart: 2.5,
          duration: 5,
          idleEnd: true,
          idleMax: 5,
          pauseHide: true
        },
        filmStrip: {
          autostart: false,
          idleEnd: true,
          idleMax: 5,
          pauseHide: true
        }
      });
      if (albums) {
        _this.setAlbums(albums);
      }
      if (preferences) {
        _this.setPreferences(preferences);
      }
      _this.dispatcher = new Dispatcher(_assertThisInitialized(_this), _this.listeners);
      _this.dispatcher.fire('Resize');
      return _this;
    }
    _createClass(Gallery, [{
      key: "get",
      value: function get(key) {
        /* outsource to Preferences class */
        if (this.preferences[key] === undefined) {
          console.warn('preference "' + key + '" not found');
        }
        return this.preferences[key];
      }
    }, {
      key: "read",
      value: function read(query) {
        /* outsource to Preferences class */
        var tokens = query.split('.');
        var payload = this.preferences;
        var _iterator = _createForOfIteratorHelper(tokens),
          _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var _payload;
            var token = _step.value;
            payload = (_payload = payload) === null || _payload === void 0 ? void 0 : _payload[token];
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
        return payload;
      }
    }, {
      key: "set",
      value: function set(key, value) {
        /* outsource to Preferences class */
        var setProperty = function setProperty(obj, path, value) {
          var _path$split = path.split('.'),
            _path$split2 = _toArray(_path$split),
            head = _path$split2[0],
            rest = _path$split2.slice(1);
          return _objectSpread2(_objectSpread2({}, obj), {}, _defineProperty({}, head, rest.length ? setProperty(obj[head], rest.join('.'), value) : value));
        };
        console.log(key, value);
        this.preferences = setProperty(this.preferences, key, value);
      }
    }, {
      key: "setPreferences",
      value: function setPreferences(preferences) {
        var merge = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
        /* outsource to Preferences class */
        if (merge && this.preferences) {
          this.preferences = _objectSpread2(_objectSpread2({}, this.preferences), preferences);
        } else {
          this.preferences = preferences;
        }
      }
    }, {
      key: "getPreferences",
      value: function getPreferences() {
        var flat = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
        /* outsource to Preferences class */
        if (flat) {
          var isScalar = function isScalar(v) {
            return !isNaN(v) || v instanceof String || typeof v === 'string';
          };
          var flatten = function flatten(settings) {
            var collected = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
            var tokens = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
            for (var _i = 0, _Object$entries = Object.entries(settings); _i < _Object$entries.length; _i++) {
              var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),
                key = _Object$entries$_i[0],
                value = _Object$entries$_i[1];
              var t = tokens.concat(key);
              if (Array.isArray(value) && value.some(isScalar)) {
                collected[t.join(".")] = value;
              } else if (value instanceof Object) {
                flatten(value, collected, tokens.concat(key));
              } else {
                collected[t.join(".")] = value;
              }
            }
            return collected;
          };
          return flatten(this.preferences);
        } else {
          return this.preferences;
        }
      }
    }, {
      key: "destroy",
      value: function destroy() {
        this.removeChild(this.canvasContainer);
        this.dispatcher.destroy();
        this.run = undefined;
      }
    }, {
      key: "requestFullscreen",
      value: function requestFullscreen(clickableElement, fullscreenTarget) {
        var _this2 = this;
        //fullscreenTarget = document.getElementById('gallery');
        clickableElement.addEventListener('click', function () {
          if (!document.fullscreenElement) {
            if (fullscreenTarget.requestFullscreen) {
              fullscreenTarget.requestFullscreen(fullscreenTarget);
            } else if (fullscreenTarget.mozRequestFullScreen) {
              // Firefox
              fullscreenTarget.mozRequestFullScreen(fullscreenTarget);
            } else if (fullscreenTarget.webkitRequestFullscreen) {
              // Chrome, Safari and Opera
              fullscreenTarget.webkitRequestFullscreen(fullscreenTarget);
            } else if (fullscreenTarget.msRequestFullscreen) {
              // IE/Edge
              fullscreenTarget.msRequestFullscreen(fullscreenTarget);
            }
          } else {
            document.exitFullscreen();
          }
        });
        addEventListener("fullscreenchange", function (event) {
          _this2.dispatchEvent('FullscreenChange', event);
        });
      }
    }, {
      key: "isFullscreen",
      value: function isFullscreen() {
        return window.fullScreen || window.innerWidth == screen.width && window.innerHeight == screen.height;
      }
    }, {
      key: "dispatchEvent",
      value: function dispatchEvent(eventName, event) {
        this.dispatcher.fire(eventName, event);
      }
    }, {
      key: "navigate",
      value: function navigate() {
        var _this$getAlbum, _this$getAlbum2, _this$getCurrentImage, _this$getCurrentImage2;
        var targetImage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "+1";
        var targetAlbum = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "+0";
        if (this.isPaused()) {
          this.dispatchEvent("PauseEnd");
        }
        if (_typeof(targetImage) === 'object' || targetImage === undefined) {
          if (targetImage.album) {
            /* select album first (this is important if queried image exists in more than one album) */
            this.setCurrentAlbumNum(this.getAlbumNumByPropertyValue(targetImage.album));
          }
          if (targetImage.image) {
            var target = this.getImageNumByPropertyValue(targetImage.image);
            if (target) {
              this.setCurrentAlbumNum(target.album);
              this.setCurrentImageNum(target.image);
            }
          }
        } else {
          /* use delta if target contains a signed value (e.g. "+1" or "-10"), use absolute value if target is unsigned or increase by 1 if target is undefined */
          if (targetAlbum !== undefined) {
            this.setCurrentAlbumNum(parseInt(targetAlbum) + ((typeof targetAlbum === 'string' || targetAlbum instanceof String) && ["+", "-"].indexOf((targetAlbum || 0).substring(0, 1) !== -1) ? this.getCurrentAlbumNum() : 0));
          }
          if (targetImage !== undefined) {
            this.setCurrentImageNum(parseInt(targetImage) + ((typeof targetImage === 'string' || targetImage instanceof String) && ["+", "-"].indexOf((targetImage || 0).substring(0, 1) !== -1) ? this.getCurrentImageNum() : 0));
          }
        }
        var albumName = ((_this$getAlbum = this.getAlbum()) === null || _this$getAlbum === void 0 ? void 0 : _this$getAlbum.title) || ((_this$getAlbum2 = this.getAlbum()) === null || _this$getAlbum2 === void 0 ? void 0 : _this$getAlbum2.name);
        var imageName = ((_this$getCurrentImage = this.getCurrentImage()) === null || _this$getCurrentImage === void 0 ? void 0 : _this$getCurrentImage.title) || ((_this$getCurrentImage2 = this.getCurrentImage()) === null || _this$getCurrentImage2 === void 0 ? void 0 : _this$getCurrentImage2.name);
        document.title = this.meta.title + this.meta.delimiter + albumName + this.meta.delimiter + imageName;
        if (!this.isFullscreen()) {
          /* window location change does not have any effect in fullscreen mode */
          var url = new URL(window.location);
          url.searchParams.set('album', albumName);
          url.searchParams.set('image', imageName);
          history.pushState({}, "", url);
        }
        if (this.firstRun) {
          /* first image -- jump to the end of a transition */
          this.transitionFrame = undefined;
          this.firstRun = false;
          this.suspended = true;
        }
        if (this.transitionFrame === undefined) {
          this.startTransition();
        } else {
          this.afterTransition = this.startTransition;
        }
        this.filmStrip.select(this.currentImageNum, this.currentAlbumNum);
        this.dispatchEvent("Navigation", {
          target: this.currentImageNum
        });
      }
    }, {
      key: "startTransition",
      value: function startTransition() {
        this.suspended = true;
        this.transitionFrame = undefined;
        this.breakTimeFrame = 0;
        this.currentDirection = this.get('direction') === 'random' ? Math.random() * 360 : this.get('direction');
        this.updateClipPathTransition();
        this.dispatchEvent("TransitionStart");
        this.showImage();
      }
    }, {
      key: "getCurrentImage",
      value: function getCurrentImage() {
        return this.getAlbumImages()[this.currentImageNum];
      }
    }, {
      key: "getImage",
      value: function getImage(idx) {
        return this.getAlbumImages()[idx];
      }
    }, {
      key: "setCurrentAlbumNum",
      value: function setCurrentAlbumNum(albumNum) {
        var imageNum = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
        if (albumNum !== undefined && albumNum !== this.currentAlbumNum) {
          this.currentAlbumNum = albumNum % this.albums.length < 0 ? albumNum % this.albums.length + this.albums.length : albumNum % this.albums.length;
          this.updateFilmStrip();
        }
        if (imageNum !== undefined && imageNum !== this.currentImageNum) {
          this.setCurrentImageNum(imageNum);
        }
        return this.currentAlbumNum;
      }
    }, {
      key: "getAlbum",
      value: function getAlbum() {
        var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;
        return this.albums[index || this.currentAlbumNum];
      }
    }, {
      key: "getAlbumInfo",
      value: function getAlbumInfo() {
        var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;
        var info = _objectSpread2({}, this.albums[index || this.currentAlbumNum]);
        delete info.images;
        return info;
      }
    }, {
      key: "getCurrentAlbumNum",
      value: function getCurrentAlbumNum() {
        return this.currentAlbumNum;
      }
    }, {
      key: "getAlbumImages",
      value: function getAlbumImages() {
        var _this$albums, _this$albums2, _this$albums3, _this$albums4;
        var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;
        return ((_this$albums = this.albums[index || this.currentAlbumNum]) === null || _this$albums === void 0 ? void 0 : _this$albums.photos) || ((_this$albums2 = this.albums) === null || _this$albums2 === void 0 ? void 0 : _this$albums2.photos) || this.photos || ((_this$albums3 = this.albums[index || this.currentAlbumNum]) === null || _this$albums3 === void 0 ? void 0 : _this$albums3.images) || ((_this$albums4 = this.albums) === null || _this$albums4 === void 0 ? void 0 : _this$albums4.images) || this.albums;
      }
    }, {
      key: "getImageSrc",
      value: function getImageSrc(img) {
        var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        if (typeof img === 'string' || img instanceof String) {
          return img;
        }
        try {
          return (img === null || img === void 0 ? void 0 : img.src) || (img === null || img === void 0 ? void 0 : img.size[size]);
        } catch (error) {
          console.log("image #" + (img.id || img.title) + " does not provide src/sizes", error, img);
        }
      }
    }, {
      key: "setCurrentImageNum",
      value: function setCurrentImageNum(newIndex) {
        if (this.get('changeAlbumOnImageNumOverflow')) {
          if (newIndex >= this.getAlbumImages().length) {
            this.setCurrentAlbumNum(this.getCurrentAlbumNum() + 1);
            newIndex = 0;
          } else if (newIndex < 0) {
            this.setCurrentAlbumNum(this.getCurrentAlbumNum() - 1);
          }
        }
        var images = this.getAlbumImages();
        /* set currentImage and normalize its value (i.e. make sure it is positive and within range of existing image amount) */
        return this.currentImageNum = (newIndex % images.length < 0 ? newIndex % images.length + images.length : newIndex % images.length) || 0;
      }
    }, {
      key: "getCurrentImageNum",
      value: function getCurrentImageNum() {
        return this.currentImageNum;
      }
    }, {
      key: "setMetaData",
      value: function setMetaData(metaData) {
        this.meta = _objectSpread2(_objectSpread2({}, this.meta), metaData);
      }
    }, {
      key: "init",
      value: function init() {
        var _this3 = this;
        var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;
        var resize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
        if (resize === true || !this.get('width') && !this.get('height')) {
          this.dispatchEvent('Resize');
        }
        if (this.canvasContainer) {
          /* remove existing canvasContainer first */
          this.removeChild(this.canvasContainer);
        }
        this.createCanvas();
        this.createInfoBox();
        this.createFilmStrip(true);
        this.navigate(params || this.currentImageNum);
        this.swiper = new DragonSwipe();
        this.swiper.onEvent = function (eventName) {
          var _console;
          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
          }
          (_console = console).log.apply(_console, [eventName].concat(args));
          _this3.dispatchEvent.apply(_this3, [eventName].concat(args));
        };
      }
    }, {
      key: "updateOverlays",
      value: function updateOverlays() {
        for (var _i2 = 0, _Object$keys = Object.keys(this.overlays); _i2 < _Object$keys.length; _i2++) {
          var key = _Object$keys[_i2];
          var os = this.overlays[key];
          if (!this.pureMode && !this.transitionFrame && !this.suspended && (os.autostart > 0 && this.breakTimeFrame === os.autostart * this.get('fps') || this.breakTimeFrame > 0 && os.idleEnd === true && this.userIdleTime === 0)) {
            this[key].classList.remove('hide');
          } else if (this.pureMode || os.idleMax * this.get('fps') === this.userIdleTime && (!os.duration || this.breakTimeFrame > os.duration * this.get('fps'))) {
            this[key].classList.add('hide');
          }
        }
      }
    }, {
      key: "update",
      value: function update() {
        //this.img[0].firstChild.style.transform;

        this.userIdleTime++;
        if (this.userIdleTime % 20 === 0) {
          this.dispatchEvent('Idle', this.userIdleTime);
        }
        if (!this.isPaused()) {
          if (this.transitionFrame !== undefined) {
            this.transitionFrame++;
            this.breakTimeFrame = 0;
          } else if (!this.suspended) {
            this.breakTimeFrame++;
          }
          this.updateClipPathTransition();
        }
        if (this.breakTimeFrame > this.get('breakTimeDuration') * this.get('fps') && this.userIdleTime > this.get('userIdleTimeDuration') * this.get('fps') && !this.suspended) {
          this.navigate("+1");
        }
      }
    }, {
      key: "updateClipPathTransition",
      value: function updateClipPathTransition() {
        if (this.transitionFrame > this.get('transitionDuration') * this.get('fps')) {
          this.dispatchEvent("TransitionEnd");
        } else if (this.transitionFrame) {
          var transitionProgress = 1 / this.get('transitionDuration') / this.get('fps');
          for (var i = 0; i < this.img.length; i++) {
            var img = this.img[i];
            if (img.style.opacity < 1) {
              img.style.opacity = parseFloat(img.style.opacity) + transitionProgress;
            }
            img.style.zIndex = this.img.length - i;
          }
        }
      }
    }, {
      key: "updateFilmStrip",
      value: function updateFilmStrip() {
        this.filmStrip.setImages(this.getAlbumImages());
        this.filmStrip.setInfo(this.getAlbumInfo());
        this.filmStrip.render();
      }
    }, {
      key: "run",
      value: function run() {
        var _this4 = this;
        if (this.isPaused()) {
          this.paused++;
          this.dispatchEvent('Paused', this.paused);
        }
        this.updateOverlays();
        this.update();
        if (this.userIdleTime === this.get('showCursorDuration') * this.get('fps')) {
          document.body.style.cursor = 'none';
        }
        this.totalFrames++;
        //      this.dispatchEvent('EnterFrame', this.transitionFrame, this.totalFrames);
        setTimeout(function () {
          return _this4.run();
        }, 1000 / this.get('fps'));
      }
    }, {
      key: "getImageNumByPropertyValue",
      value: function getImageNumByPropertyValue(imageName) {
        var _preferredAlbum;
        var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ['id', 'title', 'name'];
        var preferredAlbum = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;
        if (typeof props === 'string' || props instanceof String) {
          props = [props];
        }
        preferredAlbum = (_preferredAlbum = preferredAlbum) !== null && _preferredAlbum !== void 0 ? _preferredAlbum : this.getCurrentAlbumNum();
        for (var a = -1; a < this.albums.length; a++) {
          var album = a === -1 ? preferredAlbum : a;
          if (a === undefined) continue;
          var photos = this.albums[album].photos || this.albums[album].images;
          for (var i = 0; i < photos.length; i++) {
            var photo = photos[i];
            var _iterator2 = _createForOfIteratorHelper(props.values()),
              _step2;
            try {
              for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
                var keyIndex = _step2.value;
                if (photo[keyIndex] == imageName) {
                  return {
                    album: album,
                    image: i
                  };
                }
              }
            } catch (err) {
              _iterator2.e(err);
            } finally {
              _iterator2.f();
            }
          }
        }
        console.error('image ' + imageName + ' not found');
      }
    }, {
      key: "getAlbumNumByPropertyValue",
      value: function getAlbumNumByPropertyValue(albumName) {
        var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ['id', 'title', 'name'];
        if (typeof props === 'string' || props instanceof String) {
          props = [props];
        }
        for (var i = 0; i < this.albums.length; i++) {
          var _iterator3 = _createForOfIteratorHelper(props.values()),
            _step3;
          try {
            for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
              var keyIndex = _step3.value;
              if (this.albums[i][keyIndex] == albumName) {
                return i;
              }
            }
          } catch (err) {
            _iterator3.e(err);
          } finally {
            _iterator3.f();
          }
        }
        console.error('album ' + albumName + ' not found');
      }
    }, {
      key: "loadData",
      value: function () {
        var _loadData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
          var _this5 = this;
          var filename,
            _args = arguments;
          return _regeneratorRuntime().wrap(function _callee$(_context) {
            while (1) switch (_context.prev = _context.next) {
              case 0:
                filename = _args.length > 0 && _args[0] !== undefined ? _args[0] : './data/albums.json';
                return _context.abrupt("return", fetch(filename).then(function (response) {
                  return response.json();
                })["catch"](function (error) {
                  _this5.dispatchEvent('Error', undefined, error);
                }));
              case 2:
              case "end":
                return _context.stop();
            }
          }, _callee);
        }));
        function loadData() {
          return _loadData.apply(this, arguments);
        }
        return loadData;
      }()
    }, {
      key: "applyFilters",
      value: function applyFilters() {
        var albums = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;
        var filters = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
        albums = albums || this.loadedAlbums || this.albums;
        filters = filters || this.get('filters');
        var filteredAlbums = [];
        for (var a = 0; a < albums.length; a++) {
          var filteredAlbum = _objectSpread2({}, albums[a]);
          filteredAlbum.photos = [];
          for (var p = 0; p < albums[a].photos.length; p++) {
            var _this$get;
            var photo = albums[a].photos[p];
            if (((_this$get = this.get('filters')) === null || _this$get === void 0 ? void 0 : _this$get.safety.indexOf(photo.safety)) !== -1) {
              filteredAlbum.photos.push(photo);
            }
          }
          if (filteredAlbum.photos.length > 0) {
            filteredAlbums.push(filteredAlbum);
          }
        }
        this.albums = filteredAlbums;
      }
    }, {
      key: "resetFilters",
      value: function resetFilters() {
        this.albums = this.loadedAlbums;
      }
    }, {
      key: "setAlbums",
      value: function setAlbums(albums) {
        this.loadedAlbums = albums;
        this.applyFilters(albums);
      }
    }, {
      key: "getImageSlot",
      value: function getImageSlot() {
        var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;
        return document.getElementById("imageSlot" + (index !== undefined ? index : this.albumslots.length - 1));
      }
    }, {
      key: "isPaused",
      value: function isPaused() {
        return this.paused > 0;
      }
    }, {
      key: "setPaused",
      value: function setPaused() {
        var _this6 = this;
        var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;
        if (value === undefined) {
          value = !this.paused;
        }
        if (value === true) {
          if (this.transitionFrame && !this.isPaused()) {
            this.afterTransition = function () {
              return _this6.dispatchEvent("PauseStart");
            };
            this.userIdleTime = this.infoBoxDuration * this.get('fps') - 1;
          } else {
            this.dispatchEvent("PauseStart");
          }
        } else {
          this.dispatchEvent("PauseEnd");
        }
        return value;
      }
    }, {
      key: "_onFullscreenChange",
      value: function _onFullscreenChange(event) {
        if (!document.fullscreenElement && !document.mozFullScreenElement && !document.webkitFullscreenElement && !document.msFullscreenElement) {
          /* does not work. TODO: figure out what causes fullscreen mode to exit in the first place */
          event.preventDefault();
        }
      }
    }, {
      key: "_onMouseEnd",
      value: function _onMouseEnd(mouse) {
        if (mouse.y2 > 0 && mouse.x2 > 0 && mouse.dt > 50 && mouse.dt < 4000) {
          if (mouse.dx > 50) {
            this.navigate("-1", "+0");
          } else if (mouse.dx < -50) {
            this.navigate("+1", "+0");
          }
        }
      }
    }, {
      key: "_onLastTouch",
      value: function _onLastTouch(touch) {
        if (touch.y2 > 0 && touch.x2 > 0 && touch.dt > 50 && touch.dt < 4000) {
          if (touch.dx > 50) {
            this.navigate("-1", "+0");
          } else if (touch.dx < -50) {
            this.navigate("+1", "+0");
          }
        }
        console.log("LastTouch", touch);
      }
    }, {
      key: "_onScroll",
      value: function _onScroll(event) {
        this._onIdleEnd();
      }
    }, {
      key: "_onPureStart",
      value: function _onPureStart() {
        this.pureMode = true;
      }
    }, {
      key: "_onPureEnd",
      value: function _onPureEnd() {
        this.pureMode = false;
        this._onIdleEnd();
      }
      /* internal event listeners */
    }, {
      key: "_onKeyUp",
      value: function _onKeyUp(event) {
        if (event.key === 'Escape') {
          if (this.pureMode) {
            this.dispatchEvent('PureEnd');
          } else {
            this.dispatchEvent('PureStart');
          }
          /* escape key can be used to toggle pure mode */
        } else if (event.key === ' ') {
          this.setPaused();
        } else if (this.keysPressed.indexOf('Shift') === -1) {
          /* Shift key can be used for "silent" navigation, i.e. with muted controls */
          this.dispatchEvent('IdleEnd', this.userIdleTime);
        }
        switch (event.key) {
          case 'ArrowRight':
            this.navigate('+1');
            break;
          case 'ArrowLeft':
            this.navigate('-1');
            break;
          case 'ArrowUp':
            this.navigate(0, '-1');
            break;
          case 'ArrowDown':
            this.navigate(0, '+1');
            break;
        }
        if (this.keysPressed.indexOf(event.key) !== -1) {
          this.keysPressed.splice(this.keysPressed.indexOf(event.key), 1);
        }
      }
    }, {
      key: "_onPauseEnd",
      value: function _onPauseEnd() {
        this.paused = 0;
      }
    }, {
      key: "_onPauseStart",
      value: function _onPauseStart() {
        this.paused = 1;
        if (this.overlays.imageInfoBox.pauseHide) {
          var _this$imageInfoBox;
          (_this$imageInfoBox = this.imageInfoBox) === null || _this$imageInfoBox === void 0 ? void 0 : _this$imageInfoBox.classList.add('hide');
        }
        if (this.overlays.filmStrip.pauseHide) {
          var _this$filmStrip;
          (_this$filmStrip = this.filmStrip) === null || _this$filmStrip === void 0 ? void 0 : _this$filmStrip.classList.add('hide');
        }
      }
    }, {
      key: "_onResize",
      value: function _onResize(event) {
        var _this$canvas;
        this.set('width', this.clientWidth || this.width || document.clientWidth || 800);
        this.set('height', this.clientHeight || this.height || document.clientHeight || 600);
        (_this$canvas = this.canvas) === null || _this$canvas === void 0 ? void 0 : _this$canvas.setAttribute("viewBox", "0 0 " + this.get('width') + " " + this.get('height'));
        console.debug("canvas size: " + (this.get('width') + "x" + this.get('height')) + " fullscreen: " + this.isFullscreen());
        var iSlot = this.getImageSlot(1);
        if (iSlot) {
          iSlot.background.setAttributeNS(null, 'width', this.get('width'));
          iSlot.background.setAttributeNS(null, 'height', this.get('height'));
        }
      }
    }, {
      key: "_onIdleEnd",
      value: function _onIdleEnd() {
        if (this.userIdleTime > 0) {
          this.userIdleTime = 0;
          document.body.style.cursor = 'auto';
        }
      }
    }, {
      key: "_onMouseMove",
      value: function _onMouseMove() {
        this.dispatchEvent('IdleEnd', this.userIdleTime);
        this.userIdleTime = 0;
      }
    }, {
      key: "_onTransitionStart",
      value: function _onTransitionStart() {
        this.imageInfoBox.classList.add('hide');
      }
    }, {
      key: "_onTransitionEnd",
      value: function _onTransitionEnd() {
        this.showImageInfo();
        this.transitionFrame = undefined;
        this.breakTimeFrame = 0;
        this.suspended = false;
        if (this.paused) {
          this.setPaused(true);
        }
        if (this.afterTransition) {
          this.afterTransition();
          this.afterTransition = undefined;
        }
      }
    }, {
      key: "_onError",
      value: function _onError(event) {
        this.showMessage("An error occurred", event);
        console.error(event);
      }
    }, {
      key: "_onOnline",
      value: function _onOnline(event) {
        this.navigate("+0", "+0");
      }
    }, {
      key: "_onOffline",
      value: function _onOffline(event) {
        console.log("offline", event);
      }
    }, {
      key: "_onImageLoad",
      value: function _onImageLoad(event) {
        this.suspended = false;
        this.transitionFrame = 0;
      }
    }, {
      key: "setProps",
      value: function setProps(element, props) {
        for (var _i3 = 0, _Object$keys2 = Object.keys(props); _i3 < _Object$keys2.length; _i3++) {
          var a = _Object$keys2[_i3];
          var value = props[a];
          element[a] = value;
        }
      }
    }, {
      key: "showMessage",
      value: function showMessage(message) {
        /* TODO: make this an overlay dialogue */
        console.error(message);
      }
    }, {
      key: "showImage",
      value: function showImage() {
        var _this7 = this;
        var imgLayer = document.createElement('div');
        var img = document.createElement('img');
        img.src = this.getImageSrc(this.getCurrentImage());
        img.addEventListener("error", function (event) {
          return _this7.dispatchEvent('Error', event);
        });
        this.setProps(img.style, this.get('imgStyle'));
        this.img.unshift(imgLayer);
        this.setProps(imgLayer.style, this.get('imgLayerStyle'));
        this.setProps(imgLayer.style.zIndex, this.img.length + 1);
        imgLayer.appendChild(img);
        this.suspended = true;
        this.transitionFrame = undefined;
        img.onload = function (event) {
          return _this7._onImageLoad();
        };
        this.imageContainer.insertBefore(imgLayer, this.imageContainer.firstChild);
        for (var idx = this.imageLayersMax; idx < this.imageContainer.children.length; idx++) {
          this.imageContainer.removeChild(this.imageContainer.children[idx]);
          this.img.pop();
        }
      }
    }, {
      key: "createCanvas",
      value: function createCanvas() {
        console.log("creating canvas");
        this.canvasContainer = document.createElement('div');
        this.appendChild(this.canvasContainer);
        this.setProps(this.canvasContainer.style, {
          width: '100%',
          height: '100%',
          position: 'absolute'
        });
        this.canvasContainer.setAttribute('class', 'canvasContainer');
        this.imageContainer = document.createElement('div');
        this.canvasContainer.appendChild(this.imageContainer);
      }
    }, {
      key: "createFilmStrip",
      value: function createFilmStrip() {
        var _this8 = this;
        var forceRecreation = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
        if (!this.filmstrip || forceRecreation) {
          /* create and append film strip */
          this.filmStrip = new AlbumStrip(this.albums, this.currentImageNum, this.currentAlbumNum);
          this.filmStrip.classList.add('filmStrip', 'hide');
          this.filmStrip.onSelectImage = function (event, selectedImageNum, selectedAlbumNum) {
            _this8.navigate(selectedImageNum, selectedAlbumNum);
          };
        }
        this.canvasContainer.appendChild(this.filmStrip);
      }
    }, {
      key: "createInfoBox",
      value: function createInfoBox() {
        if (!this.imageInfoBox) {
          /* create and append infoBox Overlay */
          var _infobox = document.createElement("div");
          _infobox.classList.add('infoBox', 'hide');
          _infobox.onclick = function (event) {
            _infobox.classList.toggle('minified');
          };
          this.imageInfoBox = _infobox;
        }
        this.canvasContainer.appendChild(this.imageInfoBox);
      }
    }, {
      key: "showImageInfo",
      value: function showImageInfo() {
        var forceShow = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
        if (this.afterTransition && !forceShow) {
          return;
        }
        var el = this.imageInfoBox;
        if (forceShow) el.classList.remove('hide');
        var list = this.getCurrentImage();
        if (typeof list === 'string' || list instanceof String || Object.keys(list).length === 0) {
          var div = document.createElement('div');
          div.classList.add('noInfo');
          div.innerHTML = "No Information available";
          el.replaceChildren(div);
        } else {
          var _list, _list$dates, _list$dates2;
          list = _objectSpread2({}, this.getCurrentImage());
          (_list = list) === null || _list === void 0 ? true : delete _list.src;
          var gearUL, exifUL;
          if (list.camera) {
            var _list$exif, _list2;
            var gearList = {
              camera: list.camera,
              lens: ((_list$exif = list.exif) === null || _list$exif === void 0 ? void 0 : _list$exif.LensModel) || ((_list2 = list) === null || _list2 === void 0 ? void 0 : _list2.Lens)
            };
            gearUL = new TagsUL(gearList);
            gearUL.classList.add('imageExif');
          }
          if (list.exif) {
            var _list$exif2, _list$exif3, _list$exif4, _list$exif5, _list$exif6;
            var exifList = {
              exposure: (_list$exif2 = list.exif) === null || _list$exif2 === void 0 ? void 0 : _list$exif2.ExposureTime,
              aperture: (_list$exif3 = list.exif) === null || _list$exif3 === void 0 ? void 0 : _list$exif3.FNumber,
              focus: (_list$exif4 = list.exif) === null || _list$exif4 === void 0 ? void 0 : _list$exif4.FocalLength,
              iso: (_list$exif5 = list.exif) === null || _list$exif5 === void 0 ? void 0 : _list$exif5.ISO
            };
            if ((_list$exif6 = list.exif) !== null && _list$exif6 !== void 0 && _list$exif6.Flash) {
              var _list$exif7;
              if (((_list$exif7 = list.exif) === null || _list$exif7 === void 0 ? void 0 : _list$exif7.Flash.substring(0, 2).toLowerCase()) === 'on') {
                exifList.flash = 'on';
              } else {
                exifList.noflash = 'off';
              }
            }
            exifUL = new TagsUL(exifList);
            exifUL.classList.add('imageExif');
          }
          var infoList = {
            title: list.title,
            album: this.getAlbum().title,
            description: list.description,
            location: list.location,
            tags: list.tags,
            date: (_list$dates = list.dates) === null || _list$dates === void 0 ? void 0 : _list$dates.taken,
            posted: (_list$dates2 = list.dates) === null || _list$dates2 === void 0 ? void 0 : _list$dates2.posted,
            gear: gearUL,
            exif: exifUL
          };
          var infoUL = new TagsUL(infoList);
          infoUL.classList.add('imageInfo');
          el.replaceChildren(infoUL);
        }
      }
    }]);
    return Gallery;
  }( /*#__PURE__*/_wrapNativeSuper(HTMLElement));
  customElements.define('chameleon-gallery', Gallery);

  var DotGain = /*#__PURE__*/function (_Gallery) {
    _inherits(DotGain, _Gallery);
    var _super = _createSuper(DotGain);
    function DotGain(albums) {
      var _this;
      _classCallCheck(this, DotGain);
      _this = _super.call(this, albums);
      _defineProperty(_assertThisInitialized(_this), "additionalSettings", {
        grid: 25,
        clipPathTransitionSpeed: 2,
        transitionDuration: 40
      });
      _defineProperty(_assertThisInitialized(_this), "grid", 25);
      _defineProperty(_assertThisInitialized(_this), "transitionDuration", 40);
      _defineProperty(_assertThisInitialized(_this), "clipPathTransitionSpeed", 2);
      _defineProperty(_assertThisInitialized(_this), "clipPath", undefined);
      _defineProperty(_assertThisInitialized(_this), "clipPathId", "clipPathMask");
      _defineProperty(_assertThisInitialized(_this), "maskedImage", undefined);
      _defineProperty(_assertThisInitialized(_this), "debugMask", false);
      _this.setPreferences(_this.additionalSettings);
      return _this;
    }
    _createClass(DotGain, [{
      key: "_onTransitionEnd",
      value: function _onTransitionEnd() {
        _get(_getPrototypeOf(DotGain.prototype), "_onTransitionEnd", this).call(this);
        //        this.get('clipPathTransitionSpeed') = Math.floor(20 / (this.currentFPS / 5 + 1)); 
      }
    }, {
      key: "_onResize",
      value: function _onResize() {
        _get(_getPrototypeOf(DotGain.prototype), "_onResize", this).call(this);
        if (this.canvas) {
          console.log("updating clipMask");
          var oldClipPath = this.clipPath;
          this.createClipPath();
          this.canvas.replaceChild(oldClipPath, this.clipPath);
        }
      }
    }, {
      key: "updateClipPathTransition",
      value: function updateClipPathTransition() {
        var parameters = {
          frame: this.transitionFrame - 1,
          x: -this.get('grid') * 4,
          y: Math.max(this.get('height'), this.get('width')) - ((this.transitionFrame || 0) - 5) * this.get('grid') * this.get('clipPathTransitionSpeed'),
          limitY: -this.get('height') - this.clipPathNetSize.height,
          direction: this.currentDirection,
          suspended: this.suspended,
          userIdleTime: this.userIdleTime
        };
        this.dispatchEvent('onTransition', parameters);
        if (!parameters.suspended && parameters.y < parameters.limitY) {
          parameters.y = parameters.limitY;
          this.dispatchEvent("TransitionEnd");
          document.getElementById('imageGroup1').removeAttributeNS(null, "clip-path");
        }
        this.clipPath.style.transform = "rotate(" + parameters.direction + "deg) translate(" + parameters.x + "px, " + parameters.y + "px)";
      }
    }, {
      key: "createClipPath",
      value: function createClipPath() {
        var clipPathId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;
        var clipPath = document.createElementNS(this.svgNS, this.debugMask ? "g" : "clipPath");
        var w = this.get('width');
        var h = this.get('height');
        var cols = w / this.get('grid') * this.get('transitionDuration') / 50;
        var rows = h / this.get('grid') * this.get('transitionDuration') / 50;
        var maxRadius = this.get('grid') * Math.PI / 4;
        var r, x, y;
        for (y = 0; y <= Math.max(cols, rows) * 2; y += 1) {
          for (x = 0; x <= Math.max(cols, rows) * 2; x += 1) {
            r = y * maxRadius / (this.get('transitionDuration') || 10);
            if (r < 1) {
              continue;
            }
            if (r > maxRadius) {
              break;
            }
            /* draw dotgain circle and append to mask group */
            var circle = document.createElementNS(this.svgNS, "circle");
            circle.setAttribute("cx", x * this.get('grid'));
            circle.setAttribute("cy", y * this.get('grid'));
            circle.setAttribute("r", r < maxRadius ? r : maxRadius);
            circle.setAttribute("fill", "white");
            circle.setAttribute("stroke", "none");
            clipPath.appendChild(circle);
          }
          if (r > maxRadius) {
            break;
          }
        }
        this.clipPathNetSize = {
          width: w * 4 + this.get('grid') * 2,
          height: (y - 1) * this.get('grid')
        };
        /* create full coverage mask section path with previously collected coordinates */
        var filler = document.createElementNS(this.svgNS, "rect");
        filler.setAttributeNS(null, "x", -w);
        filler.setAttributeNS(null, "y", (y - 1) * this.get('grid'));
        filler.setAttributeNS(null, "width", w * 4 + this.get('grid') * 2);
        filler.setAttributeNS(null, "height", h * 4 + this.get('grid') * 2);
        filler.setAttributeNS(null, "stroke", "none");
        filler.setAttributeNS(null, "fill", "red");
        clipPath.appendChild(filler);
        clipPath.style.transformOrigin = "center center";

        /* define id as clip path target */
        if (!this.debugMask) {
          clipPath.id = this.clipPathId || clipPathId;
        }
        return clipPath;
      }
    }, {
      key: "_onImageLoad",
      value: function _onImageLoad(event, image) {
        event.target.setAttributeNS(null, "x", (this.get('width') - event.target.getBBox().width) * this.get('imgStyle').alignment.x);
        event.target.setAttributeNS(null, "y", (this.get('height') - event.target.getBBox().height) * this.get('imgStyle').alignment.y);
        if (event.target === this.getImageSlot(1)) {
          /* active/current image (foreground) */
          if (!this.debugMask && this.clipPath) {
            document.getElementById('imageGroup1').setAttributeNS(null, "clip-path", "url(#" + this.clipPathId + ")");
          }
          var iSlot = this.getImageSlot(1);
          iSlot.setAttributeNS(null, "visibility", "visible");
          this.suspended = false;
          this.transitionFrame = 0;
          this.updateClipPathTransition();
        } else if (event.target === this.getImageSlot(0)) {
          /* inactive/previous image (background) */
          var img = this.getCurrentImage();
          this.getImageSlot(1).setAttributeNS(null, "href", this.getImageSrc(img));
          if (!this.debugMask && this.clipPath) {
            document.getElementById('imageGroup1').setAttributeNS(null, "clip-path", "url(#" + this.clipPathId + ")");
          }
          this.getImageSlot(1).setAttributeNS(null, "visibility", "visible");
        }
      }
    }, {
      key: "showImage",
      value: function showImage() {
        var current = this.getImageSlot(1);
        var previous = this.getImageSlot(0);
        if (current.getAttributeNS(null, "href")) {
          /* deactivate clip path for foreground image */
          document.getElementById('imageGroup1').removeAttributeNS(null, "clip-path");
          /* copy previous image from main to background image slot */
          previous.setAttributeNS(null, "href", current.getAttributeNS(null, "href"));
        } else {
          var img = this.getCurrentImage();
          current.setAttributeNS(null, "visibility", "hidden");
          current.setAttributeNS(null, "href", this.getImageSrc(img));
        }
      }
    }, {
      key: "createCanvas",
      value: function createCanvas() {
        var _this2 = this;
        var w = this.get('width');
        var h = this.get('height');
        var clipPath = null;

        /* create svg object which contains dotGain - mask */
        var svg = document.createElementNS(this.svgNS, "svg");
        svg.setAttribute("viewBox", "0 0 " + w + " " + h);
        for (var i = 0; i < 2; i++) {
          /* create image group (containing image + background) for each image slot */
          var imageGroup = document.createElementNS(this.svgNS, "g");
          imageGroup.id = 'imageGroup' + i;
          imageGroup.setAttributeNS(null, 'class', 'imageGroup');

          /* create placeholder image element */
          var image = document.createElementNS(this.svgNS, "image");
          image.id = 'imageSlot' + i;
          image.setAttributeNS(null, "visibility", "visible");
          /* assign internal onload - handler for image */
          image.addEventListener("error", function (event) {
            return _this2.dispatchEvent('Error', event);
          });
          image.onload = function (event) {
            return _this2.dispatchEvent('ImageLoad', event, _this2.getCurrentImage());
          };

          /* create background */
          var background = document.createElementNS(this.svgNS, "rect");
          background.setAttributeNS(null, 'width', this.get('width'));
          background.setAttributeNS(null, 'height', this.get('height'));
          background.setAttributeNS(null, 'fill', 'black');
          image.background = background;

          /* append elements to svg canvas */
          imageGroup.appendChild(background);
          imageGroup.appendChild(image);
          svg.appendChild(imageGroup);
        }
        if (this.createClipPath) {
          clipPath = this.createClipPath();
          /* append clipPath */
          svg.appendChild(clipPath);
          this.clipPath = clipPath;
        }

        /* create div element add it to gallery context element */
        var div = document.createElement('div');
        this.appendChild(div);
        this.canvasContainer = div;
        this.canvasContainer.setAttribute('class', 'canvasContainer');
        this.canvasContainer.style.width = "100%"; /* this.get('width')+"px" */
        this.canvasContainer.style.height = "100%"; /* this.get('height')+"px" */

        /* add svg to container/canvas */
        div.appendChild(svg);
        this.canvas = svg;
        this.dispatchEvent("CanvasCreated", {
          canvasContainer: this.canvasContainer,
          canvas: svg,
          clipPath: clipPath
        });
      }
    }]);
    return DotGain;
  }(Gallery);
  customElements.define('chameleon-dotgain', DotGain);

  var Roam = /*#__PURE__*/function (_Gallery) {
    _inherits(Roam, _Gallery);
    var _super = _createSuper(Roam);
    function Roam(albums) {
      var _this;
      _classCallCheck(this, Roam);
      _this = _super.call(this, albums);
      _defineProperty(_assertThisInitialized(_this), "img", []);
      _defineProperty(_assertThisInitialized(_this), "additionalSettings", {
        zoomspeed: 5,
        imgStyle: {
          display: "block",
          objectFit: 'cover',
          position: "absolute",
          top: "50%",
          left: "50%",
          width: "100%",
          height: "100%",
          transform: "translate(-50%, -50%) scale(1)",
          "backface-visibility": "hidden",
          "transition": "transform 0.35s"
        }
      });
      _defineProperty(_assertThisInitialized(_this), "animationFrame", 0);
      _defineProperty(_assertThisInitialized(_this), "imageContainer", void 0);
      _this.setPreferences(_this.additionalSettings);
      return _this;
    }
    _createClass(Roam, [{
      key: "updateClipPathTransition",
      value: function updateClipPathTransition() {
        if (this.transitionFrame > this.get('transitionDuration') * this.get('fps')) {
          this.dispatchEvent("TransitionEnd");
        } else if (this.transitionFrame) {
          for (var i = 0; i < this.img.length; i++) {
            var img = this.img[i];
            if (img.style.opacity < 1) {
              img.style.opacity = parseFloat(img.style.opacity) + 1 / this.get('transitionDuration') / this.get('fps');
            }
            img.style.zIndex = this.img.length - i;
          }
        }
      }
    }, {
      key: "update",
      value: function update() {
        _get(_getPrototypeOf(Roam.prototype), "update", this).call(this);
        for (var i = 0; i < this.img.length; i++) {
          if (i > 1) {
            break;
          }
          this.img[i].animationFrame = this.img[i].animationFrame === undefined ? 0 : this.img[i].animationFrame + 1;
          var scale = 1 + this.img[i].animationFrame * this.get('zoomspeed') / 1000 / this.get('fps');
          this.img[i].firstChild.style.transform = "translate(-50%, -50%) scale(" + scale + ")";
        }
        //        let top = this.img[0].firstChild.style.top;
        //        this.img[0].firstChild.style.top = (parseFloat(top.substring(0,top.length-2)) + 0.1) + "px";
      }
    }]);
    return Roam;
  }(Gallery);
  customElements.define('chameleon-roam', Roam);

  var Sandwich = /*#__PURE__*/function (_HTMLElement) {
    _inherits(Sandwich, _HTMLElement);
    var _super = _createSuper(Sandwich);
    function Sandwich() {
      var _this;
      var menu = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;
      var autostart = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      _classCallCheck(this, Sandwich);
      _this = _super.call(this);
      _defineProperty(_assertThisInitialized(_this), "menu", undefined);
      _defineProperty(_assertThisInitialized(_this), "buttons", undefined);
      _defineProperty(_assertThisInitialized(_this), "target", undefined);
      _defineProperty(_assertThisInitialized(_this), "title", undefined);
      _defineProperty(_assertThisInitialized(_this), "expanded", false);
      _defineProperty(_assertThisInitialized(_this), "items", []);
      _defineProperty(_assertThisInitialized(_this), "queryParam", 'page');
      _defineProperty(_assertThisInitialized(_this), "hideClass", 'hide');
      _defineProperty(_assertThisInitialized(_this), "activeClass", 'active');
      _defineProperty(_assertThisInitialized(_this), "defaultMenuItemNum", undefined);
      _defineProperty(_assertThisInitialized(_this), "selectedMenuItemNum", undefined);
      if (autostart) {
        _this.init(menu);
      }
      return _this;
    }
    _createClass(Sandwich, [{
      key: "init",
      value: function init(menu) {
        var _this$attributes$quer,
          _this$attributes$hide,
          _this$attributes$acti,
          _this$attributes$butt,
          _this2 = this,
          _this$attributes$menu;
        this.menu = menu;
        this.queryParam = ((_this$attributes$quer = this.attributes.queryParam) === null || _this$attributes$quer === void 0 ? void 0 : _this$attributes$quer.value) || this.queryParam || 'page';
        this.hideClass = ((_this$attributes$hide = this.attributes.hideClass) === null || _this$attributes$hide === void 0 ? void 0 : _this$attributes$hide.value) || this.hideClass || 'hide';
        this.activeClass = ((_this$attributes$acti = this.attributes.activeClass) === null || _this$attributes$acti === void 0 ? void 0 : _this$attributes$acti.value) || this.activeClass || 'active';
        this.buttons = this.querySelectorAll(((_this$attributes$butt = this.attributes.button) === null || _this$attributes$butt === void 0 ? void 0 : _this$attributes$butt.value) || 'button.sandwich');
        this.buttons.forEach(function (element) {
          element.addEventListener('click', function (event) {
            return _this2._onClick(event);
          });
        });
        if (this.attributes.target) {
          var _this$attributes$targ;
          this.target = this.querySelector(((_this$attributes$targ = this.attributes.target) === null || _this$attributes$targ === void 0 ? void 0 : _this$attributes$targ.value) || '.content');
        }
        if (!this.target) {
          var _this$attributes$targ2;
          this.target = document.createElement('div');
          if ((_this$attributes$targ2 = this.attributes.targetClass) !== null && _this$attributes$targ2 !== void 0 && _this$attributes$targ2.value) {
            this.target.classList.add(this.attributes.targetClass.value.split(" "));
          }
          this.appendChild(this.target);
        }
        this.menu = this.querySelector(((_this$attributes$menu = this.attributes.menu) === null || _this$attributes$menu === void 0 ? void 0 : _this$attributes$menu.value) || 'ul.menu');
        if (!this.menu) {
          var _this$attributes$menu2;
          this.menu = document.createElement('ul');
          if ((_this$attributes$menu2 = this.attributes.menuClass) !== null && _this$attributes$menu2 !== void 0 && _this$attributes$menu2.value) {
            this.menu.classList.add(this.attributes.menuClass.value.split(" "));
          }
          this.appendChild(this.menu);
        } else {
          this.menu.querySelectorAll('li').forEach(function (element) {
            element.dataset.link = _this2.buildPageUrl(element.innerHTML.toLowerCase());
            var idx = _this2.items.push(element);
            element.addEventListener('click', function (event) {
              return _this2._onClickMenuItem(idx - 1);
            });
          });
        }
        this.createMenuItems();
        var userSelectedPage = this.getMenuItemNumByUrl(this.getPage());
        this._onToggle(userSelectedPage !== undefined);
        this.selectMenuItemNum(userSelectedPage !== null && userSelectedPage !== void 0 ? userSelectedPage : this.defaultMenuItemNum);
        this.updateQuery();
      }
    }, {
      key: "buildPageUrl",
      value: function buildPageUrl(page) {
        return "/pages/" + page + ".html";
      }
    }, {
      key: "getMenuItemNumByUrl",
      value: function getMenuItemNumByUrl(url) {
        for (var i in this.items) {
          if (this.items[i].dataset.link === url) {
            return i;
          }
        }
      }
    }, {
      key: "createMenuItems",
      value: function createMenuItems() {
        var _this3 = this;
        if (this.attributes.items.value) {
          var items = JSON.parse(this.attributes.items.value);
          if (Array.isArray(items)) {
            var _loop = function _loop() {
              var li = document.createElement('li');
              if (items[i] instanceof String || typeof items[i] === 'string') {
                li.innerHTML = items[i];
              } else {
                li.innerHTML = items[i].title;
                for (var _i = 0, _Object$keys = Object.keys(items[i]); _i < _Object$keys.length; _i++) {
                  var ki = _Object$keys[_i];
                  li.dataset[ki] = items[i][ki];
                }
              }
              if (!li.dataset['link']) {
                li.dataset.link = _this3.buildPageUrl(li.innerHTML.toLowerCase());
              }
              _this3.menu.appendChild(li);
              var idx = _this3.items.push(li) - 1;
              li.addEventListener('click', function (event) {
                return _this3._onClickMenuItem(idx);
              });
              if (items[i]["default"] === true) {
                _this3.defaultMenuItemNum = idx;
              }
            };
            for (var i in items) {
              _loop();
            }
          }
        }
      }
    }, {
      key: "_onLoadPage",
      value: function _onLoadPage(doc, page, menuItem) {
        if (typeof this.onLoadPage === 'function') {
          this.onLoadPage(doc, page, menuItem);
        }
        doc.style.display = 'none';
        doc.style.display = 'block';
        console.log("pageload", doc);
      }
    }, {
      key: "setPage",
      value: function setPage(page) {
        this.page = page;
        this.updateQuery(page);
      }
    }, {
      key: "updateQuery",
      value: function updateQuery() {
        var _page;
        var page = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;
        page = (_page = page) !== null && _page !== void 0 ? _page : this.getPage();
        var url = new URL(window.location);
        if (!this.expanded || page === undefined) {
          url.searchParams["delete"](this.queryParam);
        } else {
          url.searchParams.set(this.queryParam, page);
        }
        history.pushState({}, "", url);
      }
    }, {
      key: "getPage",
      value: function getPage() {
        var urlSearchParams = new URLSearchParams(window.location.search);
        var params = Object.fromEntries(urlSearchParams.entries());
        if (params[this.queryParam]) {
          this.page = params[this.queryParam];
        }
        return this.page;
      }
    }, {
      key: "selectMenuItemNum",
      value: function selectMenuItemNum(itemNum) {
        var _item$dataset,
          _this4 = this,
          _this$items$this$sele;
        itemNum = itemNum !== undefined ? itemNum : this.selectMenuItemNum;
        var item = this.items[itemNum];
        var page = (_item$dataset = item.dataset) === null || _item$dataset === void 0 ? void 0 : _item$dataset.link;
        this.setPage(page);
        if (this.target) {
          fetch(page).then(function (response) {
            return response.text();
          }).then(function (html) {
            // Convert the HTML string into a document object
            var parser = new DOMParser();
            var doc = parser.parseFromString(html, 'text/html');
            _this4.target.innerHTML = '';
            if (doc.body) {
              var docObj = _this4.target.appendChild(doc.body);
              //                    docObj.style.minHeight = docObj.scrollHeight+"px";
              _this4._onLoadPage(docObj, page, item);
            } else {
              _this4.target.innerHTML = 'Ressource ' + page + ' could not be loaded';
            }
          })["catch"](function (error) {
            console.error("error loading ressource", item, error);
          });
        }
        (_this$items$this$sele = this.items[this.selectedMenuItemNum]) === null || _this$items$this$sele === void 0 ? void 0 : _this$items$this$sele.classList.remove(this.activeClass);
        this.selectedMenuItemNum = itemNum;
        this.items[this.selectedMenuItemNum].classList.add(this.activeClass);
      }
    }, {
      key: "_onClickMenuItem",
      value: function _onClickMenuItem(itemNum) {
        this.selectMenuItemNum(itemNum);
      }
    }, {
      key: "_onToggle",
      value: function _onToggle() {
        var expanded = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;
        this.expanded = expanded !== undefined ? expanded : !this.expanded;
        var items = [this.menu, this.target];
        if (this.attributes.permanent) {
          items = this.children;
        }
        for (var i = 0; i < items.length; i++) {
          if (!items[i].classList.contains(this.attributes.permanent.value)) {
            if (this.expanded) {
              items[i].classList.remove(this.hideClass);
            } else {
              items[i].classList.add(this.hideClass);
            }
          }
        }
        this.style.pointerEvents = this.expanded ? 'all' : 'none';
        this.updateQuery(this.getPage());
        if (this.onToggle) {
          this.onToggle(this.expanded);
        }
      }
    }, {
      key: "_onClick",
      value: function _onClick(event) {
        this._onToggle();
      }
    }]);
    return Sandwich;
  }( /*#__PURE__*/_wrapNativeSuper(HTMLElement));
  customElements.define('menu-sandwich', Sandwich);

  function createCommonjsModule(fn, module) {
  	return module = { exports: {} }, fn(module, module.exports), module.exports;
  }

  /**
   * Helpers.
   */

  var s = 1000;
  var m = s * 60;
  var h = m * 60;
  var d = h * 24;
  var w = d * 7;
  var y = d * 365.25;

  /**
   * Parse or format the given `val`.
   *
   * Options:
   *
   *  - `long` verbose formatting [false]
   *
   * @param {String|Number} val
   * @param {Object} [options]
   * @throws {Error} throw an error if val is not a non-empty string or a number
   * @return {String|Number}
   * @api public
   */

  var ms = function(val, options) {
    options = options || {};
    var type = typeof val;
    if (type === 'string' && val.length > 0) {
      return parse(val);
    } else if (type === 'number' && isFinite(val)) {
      return options.long ? fmtLong(val) : fmtShort(val);
    }
    throw new Error(
      'val is not a non-empty string or a valid number. val=' +
        JSON.stringify(val)
    );
  };

  /**
   * Parse the given `str` and return milliseconds.
   *
   * @param {String} str
   * @return {Number}
   * @api private
   */

  function parse(str) {
    str = String(str);
    if (str.length > 100) {
      return;
    }
    var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
      str
    );
    if (!match) {
      return;
    }
    var n = parseFloat(match[1]);
    var type = (match[2] || 'ms').toLowerCase();
    switch (type) {
      case 'years':
      case 'year':
      case 'yrs':
      case 'yr':
      case 'y':
        return n * y;
      case 'weeks':
      case 'week':
      case 'w':
        return n * w;
      case 'days':
      case 'day':
      case 'd':
        return n * d;
      case 'hours':
      case 'hour':
      case 'hrs':
      case 'hr':
      case 'h':
        return n * h;
      case 'minutes':
      case 'minute':
      case 'mins':
      case 'min':
      case 'm':
        return n * m;
      case 'seconds':
      case 'second':
      case 'secs':
      case 'sec':
      case 's':
        return n * s;
      case 'milliseconds':
      case 'millisecond':
      case 'msecs':
      case 'msec':
      case 'ms':
        return n;
      default:
        return undefined;
    }
  }

  /**
   * Short format for `ms`.
   *
   * @param {Number} ms
   * @return {String}
   * @api private
   */

  function fmtShort(ms) {
    var msAbs = Math.abs(ms);
    if (msAbs >= d) {
      return Math.round(ms / d) + 'd';
    }
    if (msAbs >= h) {
      return Math.round(ms / h) + 'h';
    }
    if (msAbs >= m) {
      return Math.round(ms / m) + 'm';
    }
    if (msAbs >= s) {
      return Math.round(ms / s) + 's';
    }
    return ms + 'ms';
  }

  /**
   * Long format for `ms`.
   *
   * @param {Number} ms
   * @return {String}
   * @api private
   */

  function fmtLong(ms) {
    var msAbs = Math.abs(ms);
    if (msAbs >= d) {
      return plural(ms, msAbs, d, 'day');
    }
    if (msAbs >= h) {
      return plural(ms, msAbs, h, 'hour');
    }
    if (msAbs >= m) {
      return plural(ms, msAbs, m, 'minute');
    }
    if (msAbs >= s) {
      return plural(ms, msAbs, s, 'second');
    }
    return ms + ' ms';
  }

  /**
   * Pluralization helper.
   */

  function plural(ms, msAbs, n, name) {
    var isPlural = msAbs >= n * 1.5;
    return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');
  }

  /**
   * This is the common logic for both the Node.js and web browser
   * implementations of `debug()`.
   */

  function setup(env) {
  	createDebug.debug = createDebug;
  	createDebug.default = createDebug;
  	createDebug.coerce = coerce;
  	createDebug.disable = disable;
  	createDebug.enable = enable;
  	createDebug.enabled = enabled;
  	createDebug.humanize = ms;
  	createDebug.destroy = destroy;

  	Object.keys(env).forEach(key => {
  		createDebug[key] = env[key];
  	});

  	/**
  	* The currently active debug mode names, and names to skip.
  	*/

  	createDebug.names = [];
  	createDebug.skips = [];

  	/**
  	* Map of special "%n" handling functions, for the debug "format" argument.
  	*
  	* Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
  	*/
  	createDebug.formatters = {};

  	/**
  	* Selects a color for a debug namespace
  	* @param {String} namespace The namespace string for the debug instance to be colored
  	* @return {Number|String} An ANSI color code for the given namespace
  	* @api private
  	*/
  	function selectColor(namespace) {
  		let hash = 0;

  		for (let i = 0; i < namespace.length; i++) {
  			hash = ((hash << 5) - hash) + namespace.charCodeAt(i);
  			hash |= 0; // Convert to 32bit integer
  		}

  		return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
  	}
  	createDebug.selectColor = selectColor;

  	/**
  	* Create a debugger with the given `namespace`.
  	*
  	* @param {String} namespace
  	* @return {Function}
  	* @api public
  	*/
  	function createDebug(namespace) {
  		let prevTime;
  		let enableOverride = null;
  		let namespacesCache;
  		let enabledCache;

  		function debug(...args) {
  			// Disabled?
  			if (!debug.enabled) {
  				return;
  			}

  			const self = debug;

  			// Set `diff` timestamp
  			const curr = Number(new Date());
  			const ms = curr - (prevTime || curr);
  			self.diff = ms;
  			self.prev = prevTime;
  			self.curr = curr;
  			prevTime = curr;

  			args[0] = createDebug.coerce(args[0]);

  			if (typeof args[0] !== 'string') {
  				// Anything else let's inspect with %O
  				args.unshift('%O');
  			}

  			// Apply any `formatters` transformations
  			let index = 0;
  			args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {
  				// If we encounter an escaped % then don't increase the array index
  				if (match === '%%') {
  					return '%';
  				}
  				index++;
  				const formatter = createDebug.formatters[format];
  				if (typeof formatter === 'function') {
  					const val = args[index];
  					match = formatter.call(self, val);

  					// Now we need to remove `args[index]` since it's inlined in the `format`
  					args.splice(index, 1);
  					index--;
  				}
  				return match;
  			});

  			// Apply env-specific formatting (colors, etc.)
  			createDebug.formatArgs.call(self, args);

  			const logFn = self.log || createDebug.log;
  			logFn.apply(self, args);
  		}

  		debug.namespace = namespace;
  		debug.useColors = createDebug.useColors();
  		debug.color = createDebug.selectColor(namespace);
  		debug.extend = extend;
  		debug.destroy = createDebug.destroy; // XXX Temporary. Will be removed in the next major release.

  		Object.defineProperty(debug, 'enabled', {
  			enumerable: true,
  			configurable: false,
  			get: () => {
  				if (enableOverride !== null) {
  					return enableOverride;
  				}
  				if (namespacesCache !== createDebug.namespaces) {
  					namespacesCache = createDebug.namespaces;
  					enabledCache = createDebug.enabled(namespace);
  				}

  				return enabledCache;
  			},
  			set: v => {
  				enableOverride = v;
  			}
  		});

  		// Env-specific initialization logic for debug instances
  		if (typeof createDebug.init === 'function') {
  			createDebug.init(debug);
  		}

  		return debug;
  	}

  	function extend(namespace, delimiter) {
  		const newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);
  		newDebug.log = this.log;
  		return newDebug;
  	}

  	/**
  	* Enables a debug mode by namespaces. This can include modes
  	* separated by a colon and wildcards.
  	*
  	* @param {String} namespaces
  	* @api public
  	*/
  	function enable(namespaces) {
  		createDebug.save(namespaces);
  		createDebug.namespaces = namespaces;

  		createDebug.names = [];
  		createDebug.skips = [];

  		let i;
  		const split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
  		const len = split.length;

  		for (i = 0; i < len; i++) {
  			if (!split[i]) {
  				// ignore empty strings
  				continue;
  			}

  			namespaces = split[i].replace(/\*/g, '.*?');

  			if (namespaces[0] === '-') {
  				createDebug.skips.push(new RegExp('^' + namespaces.slice(1) + '$'));
  			} else {
  				createDebug.names.push(new RegExp('^' + namespaces + '$'));
  			}
  		}
  	}

  	/**
  	* Disable debug output.
  	*
  	* @return {String} namespaces
  	* @api public
  	*/
  	function disable() {
  		const namespaces = [
  			...createDebug.names.map(toNamespace),
  			...createDebug.skips.map(toNamespace).map(namespace => '-' + namespace)
  		].join(',');
  		createDebug.enable('');
  		return namespaces;
  	}

  	/**
  	* Returns true if the given mode name is enabled, false otherwise.
  	*
  	* @param {String} name
  	* @return {Boolean}
  	* @api public
  	*/
  	function enabled(name) {
  		if (name[name.length - 1] === '*') {
  			return true;
  		}

  		let i;
  		let len;

  		for (i = 0, len = createDebug.skips.length; i < len; i++) {
  			if (createDebug.skips[i].test(name)) {
  				return false;
  			}
  		}

  		for (i = 0, len = createDebug.names.length; i < len; i++) {
  			if (createDebug.names[i].test(name)) {
  				return true;
  			}
  		}

  		return false;
  	}

  	/**
  	* Convert regexp to namespace
  	*
  	* @param {RegExp} regxep
  	* @return {String} namespace
  	* @api private
  	*/
  	function toNamespace(regexp) {
  		return regexp.toString()
  			.substring(2, regexp.toString().length - 2)
  			.replace(/\.\*\?$/, '*');
  	}

  	/**
  	* Coerce `val`.
  	*
  	* @param {Mixed} val
  	* @return {Mixed}
  	* @api private
  	*/
  	function coerce(val) {
  		if (val instanceof Error) {
  			return val.stack || val.message;
  		}
  		return val;
  	}

  	/**
  	* XXX DO NOT USE. This is a temporary stub function.
  	* XXX It WILL be removed in the next major release.
  	*/
  	function destroy() {
  		console.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');
  	}

  	createDebug.enable(createDebug.load());

  	return createDebug;
  }

  var common = setup;

  var browser = createCommonjsModule(function (module, exports) {
  /* eslint-env browser */

  /**
   * This is the web browser implementation of `debug()`.
   */

  exports.formatArgs = formatArgs;
  exports.save = save;
  exports.load = load;
  exports.useColors = useColors;
  exports.storage = localstorage();
  exports.destroy = (() => {
  	let warned = false;

  	return () => {
  		if (!warned) {
  			warned = true;
  			console.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');
  		}
  	};
  })();

  /**
   * Colors.
   */

  exports.colors = [
  	'#0000CC',
  	'#0000FF',
  	'#0033CC',
  	'#0033FF',
  	'#0066CC',
  	'#0066FF',
  	'#0099CC',
  	'#0099FF',
  	'#00CC00',
  	'#00CC33',
  	'#00CC66',
  	'#00CC99',
  	'#00CCCC',
  	'#00CCFF',
  	'#3300CC',
  	'#3300FF',
  	'#3333CC',
  	'#3333FF',
  	'#3366CC',
  	'#3366FF',
  	'#3399CC',
  	'#3399FF',
  	'#33CC00',
  	'#33CC33',
  	'#33CC66',
  	'#33CC99',
  	'#33CCCC',
  	'#33CCFF',
  	'#6600CC',
  	'#6600FF',
  	'#6633CC',
  	'#6633FF',
  	'#66CC00',
  	'#66CC33',
  	'#9900CC',
  	'#9900FF',
  	'#9933CC',
  	'#9933FF',
  	'#99CC00',
  	'#99CC33',
  	'#CC0000',
  	'#CC0033',
  	'#CC0066',
  	'#CC0099',
  	'#CC00CC',
  	'#CC00FF',
  	'#CC3300',
  	'#CC3333',
  	'#CC3366',
  	'#CC3399',
  	'#CC33CC',
  	'#CC33FF',
  	'#CC6600',
  	'#CC6633',
  	'#CC9900',
  	'#CC9933',
  	'#CCCC00',
  	'#CCCC33',
  	'#FF0000',
  	'#FF0033',
  	'#FF0066',
  	'#FF0099',
  	'#FF00CC',
  	'#FF00FF',
  	'#FF3300',
  	'#FF3333',
  	'#FF3366',
  	'#FF3399',
  	'#FF33CC',
  	'#FF33FF',
  	'#FF6600',
  	'#FF6633',
  	'#FF9900',
  	'#FF9933',
  	'#FFCC00',
  	'#FFCC33'
  ];

  /**
   * Currently only WebKit-based Web Inspectors, Firefox >= v31,
   * and the Firebug extension (any Firefox version) are known
   * to support "%c" CSS customizations.
   *
   * TODO: add a `localStorage` variable to explicitly enable/disable colors
   */

  // eslint-disable-next-line complexity
  function useColors() {
  	// NB: In an Electron preload script, document will be defined but not fully
  	// initialized. Since we know we're in Chrome, we'll just detect this case
  	// explicitly
  	if (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {
  		return true;
  	}

  	// Internet Explorer and Edge do not support colors.
  	if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
  		return false;
  	}

  	// Is webkit? http://stackoverflow.com/a/16459606/376773
  	// document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
  	return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||
  		// Is firebug? http://stackoverflow.com/a/398120/376773
  		(typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||
  		// Is firefox >= v31?
  		// https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
  		(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||
  		// Double check webkit in userAgent just in case we are in a worker
  		(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/));
  }

  /**
   * Colorize log arguments if enabled.
   *
   * @api public
   */

  function formatArgs(args) {
  	args[0] = (this.useColors ? '%c' : '') +
  		this.namespace +
  		(this.useColors ? ' %c' : ' ') +
  		args[0] +
  		(this.useColors ? '%c ' : ' ') +
  		'+' + module.exports.humanize(this.diff);

  	if (!this.useColors) {
  		return;
  	}

  	const c = 'color: ' + this.color;
  	args.splice(1, 0, c, 'color: inherit');

  	// The final "%c" is somewhat tricky, because there could be other
  	// arguments passed either before or after the %c, so we need to
  	// figure out the correct index to insert the CSS into
  	let index = 0;
  	let lastC = 0;
  	args[0].replace(/%[a-zA-Z%]/g, match => {
  		if (match === '%%') {
  			return;
  		}
  		index++;
  		if (match === '%c') {
  			// We only are interested in the *last* %c
  			// (the user may have provided their own)
  			lastC = index;
  		}
  	});

  	args.splice(lastC, 0, c);
  }

  /**
   * Invokes `console.debug()` when available.
   * No-op when `console.debug` is not a "function".
   * If `console.debug` is not available, falls back
   * to `console.log`.
   *
   * @api public
   */
  exports.log = console.debug || console.log || (() => {});

  /**
   * Save `namespaces`.
   *
   * @param {String} namespaces
   * @api private
   */
  function save(namespaces) {
  	try {
  		if (namespaces) {
  			exports.storage.setItem('debug', namespaces);
  		} else {
  			exports.storage.removeItem('debug');
  		}
  	} catch (error) {
  		// Swallow
  		// XXX (@Qix-) should we be logging these?
  	}
  }

  /**
   * Load `namespaces`.
   *
   * @return {String} returns the previously persisted debug modes
   * @api private
   */
  function load() {
  	let r;
  	try {
  		r = exports.storage.getItem('debug');
  	} catch (error) {
  		// Swallow
  		// XXX (@Qix-) should we be logging these?
  	}

  	// If debug isn't set in LS, and we're in Electron, try to load $DEBUG
  	if (!r && typeof process !== 'undefined' && 'env' in process) {
  		r = process.env.DEBUG;
  	}

  	return r;
  }

  /**
   * Localstorage attempts to return the localstorage.
   *
   * This is necessary because safari throws
   * when a user disables cookies/localstorage
   * and you attempt to access it.
   *
   * @return {LocalStorage}
   * @api private
   */

  function localstorage() {
  	try {
  		// TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context
  		// The Browser also has localStorage in the global context.
  		return localStorage;
  	} catch (error) {
  		// Swallow
  		// XXX (@Qix-) should we be logging these?
  	}
  }

  module.exports = common(exports);

  const {formatters} = module.exports;

  /**
   * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
   */

  formatters.j = function (v) {
  	try {
  		return JSON.stringify(v);
  	} catch (error) {
  		return '[UnexpectedJSONParseError]: ' + error.message;
  	}
  };
  });
  browser.formatArgs;
  browser.save;
  browser.load;
  browser.useColors;
  browser.storage;
  browser.destroy;
  browser.colors;
  browser.log;

  var log = browser('app:log');
  var gallery;
  var firstRun = true;
  {
    browser.enable('*');
    log('Logging is enabled!');
  }
  document.querySelector('menu-sandwich').onLoadPage = function (doc, page, data) {
    window.setFormValues(doc.querySelector('form'));
  };
  window.setFormValues = function (form) {
    form = form || document.querySelector('form');
    var prefs = gallery.getPreferences(true);
    if (form) {
      /* set form values of "settings"-page according to current gallery preferences */
      for (var _i = 0, _Object$entries = Object.entries(prefs); _i < _Object$entries.length; _i++) {
        var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),
          key = _Object$entries$_i[0],
          value = _Object$entries$_i[1];
        var el = form.querySelector('[name="' + key + '"]');
        if (el) {
          if (el.options) {
            for (var i = 0; i < el.options.length; i++) {
              var option = el.options[i];
              if (option.value === value || Array.isArray(value) && value.indexOf(option.value) !== -1) {
                el.options[i].setAttribute('selected', '');
              }
            }
          } else {
            el.value = value;
          }
        }
      }
    }
  };
  window.onSubmitSettings = function (event, form) {
    event.preventDefault();
    var formData = new FormData(form);
    var settings = {};
    var _iterator = _createForOfIteratorHelper(formData.entries()),
      _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var _step$value = _slicedToArray(_step.value, 2),
          _key = _step$value[0],
          _value = _step$value[1];
        if (settings[_key]) {
          if (!Array.isArray(settings[_key])) {
            settings[_key] = [settings[_key]];
          }
          /* append to existing key */
          settings[_key].push(_value);
        } else {
          settings[_key] = _value;
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
    for (var _i2 = 0, _Object$entries2 = Object.entries(settings); _i2 < _Object$entries2.length; _i2++) {
      var _Object$entries2$_i = _slicedToArray(_Object$entries2[_i2], 2),
        key = _Object$entries2$_i[0],
        value = _Object$entries2$_i[1];
      gallery.set(key, value);
    }
    if (settings['filters.safety']) {
      /* TODO: make gallery reinitialize when filters affect current image selection */
      gallery.applyFilters();
      gallery.setCurrentAlbumNum(0);
      gallery.setCurrentImageNum(0);
      gallery.init();
    }
    window.setFormValues();
  };
  function start(theme) {
    var urlSearchParams = new URLSearchParams(window.location.search);
    var params = Object.fromEntries(urlSearchParams.entries());
    theme = theme || (params === null || params === void 0 ? void 0 : params.theme) || 'DotGain';
    window.theme = theme;
    gallery = document.getElementById("gallery");
    if (gallery) {
      gallery.destroy();
      document.body.removeChild(gallery);
    }
    switch (theme.toLowerCase()) {
      case "dotgain":
        gallery = new DotGain();
        break;
      case "roam":
        gallery = new Roam();
        break;
      default:
        gallery = new Gallery();
    }
    gallery.setAttribute('id', 'gallery');
    document.body.appendChild(gallery);
    window.gallery = gallery;
    gallery.loadData('./data/albums.json').then(function (data) {
      gallery.setAlbums(data);
      gallery.init(params);
      gallery.run();
      /*
        }).catch(error => {
        gallery.loadData('./data/example.json').then(data => {
          gallery.setImages(data);
          gallery.init(params);
          gallery.run();
      })
          */
    });

    if (firstRun) {
      document.querySelectorAll('.requestFullscreen').forEach(function (el) {
        gallery.requestFullscreen(el, document.getElementById('fullscreenRoot'));
      });
      document.querySelectorAll('menu-sandwich').forEach(function (el) {
        el.onToggle = function (expanded) {
          if (expanded) {
            gallery.dispatchEvent("PureStart");
          } else {
            gallery.dispatchEvent("PureEnd");
          }
        };
        el.init();
      });
      gallery.loadData('./data/meta.json').then(function (data) {
        if (data) {
          var _document$querySelect;
          gallery.setMetaData(data);
          (_document$querySelect = document.querySelectorAll('.meta-title')) === null || _document$querySelect === void 0 ? void 0 : _document$querySelect.forEach(function (element) {
            return element.innerHTML = data === null || data === void 0 ? void 0 : data.title;
          });
        }
      });
    }
    document.querySelectorAll('button.topic').forEach(function (button) {
      if (button.dataset.topic === theme) {
        button.classList.add('active');
      } else {
        button.classList.remove('active');
      }
    });

    //gallery.setImages(albums);

    // in order to listen to all events from the gallery, you can implement "eventHandler" and digest events yourself:
    // gallery.eventHandler = (event, payload, args) => {console.log(event);console.log(payload);console.log(args);}

    // in order to digest particular events, you can do so by implementing a custom callback function which will be called when a certain event has been dispatched, for example:
    // gallery.onNavigation(event);
    // gallery.onImageLoad(event);
    // gallery.onTransisitionEnd(image);
    // gallery.onCanvasCreated(canvasObject);
    // gallery.onTransition = (transition) => {gallery.currentDirection += (gallery.getCurrentImageNum() % 2 == 0) ? 1 : -1;}
    // etc.

    /* set event listeners */

    //screen.orientation.addEventListener("change", onResize); /* TODO: CHECK WHY RESIZE DOES NOT WORK ON iOS */

    gallery.direction = "random";
    gallery.onPureStart = function () {
      console.log("pure start");
      gallery.onIdle(60);
    };
    gallery.onPureEnd = function () {
      gallery.onIdleEnd();
    };
    gallery.onIdle = function (idleTime) {
      if (idleTime == 60) {
        document.querySelectorAll('.idleHide').forEach(function (element) {
          element.classList.add('hide');
        });
        //      } else if (idleTime == 200) {
        //        document.querySelectorAll('menu-sandwich').forEach((el) => {el._onToggle(false);});        
      }
    };

    gallery.onPauseStart = function () {
      updatePauseButtons(true);
    };
    gallery.onPauseEnd = function () {
      updatePauseButtons(false);
    };
    gallery.onIdleEnd = function (idleTime) {
      if (!gallery.pureMode) {
        document.querySelectorAll('.idleHide').forEach(function (element) {
          element.classList.remove('hide');
        });
      }
    };
    gallery.onNavigation = function (payload) {
      if (document.querySelector('div.curtain')) {
        document.querySelector('div.curtain').classList.add('hide');
        setTimeout(function () {
          document.querySelector('div.curtain').classList.add('disabled');
          document.body.removeChild(document.querySelector('div.curtain'));
        }, 2000);
        document.body.classList.remove('darkness');
      }
      gallery.currentDirection = {
        '-1': 90,
        '+1': 270
      }[payload.target] || gallery.currentDirection;
    };
    gallery.onResize = function () {
      var scale = 'scale(1)';
      document.body.style.webkitTransform = scale;
      document.body.style.msTransform = scale;
      document.body.style.transform = scale;
      if (!gallery.isFullscreen()) {
        window.scrollTo(0, 0);
      }
    };
    firstRun = false;
  }
  function updatePauseButtons(paused) {
    document.querySelectorAll('.controls .button.toggle').forEach(function (el) {
      console.log("update pause ", el);
      el.classList.add('stress');
      if (paused) {
        el.classList.add('paused');
      } else {
        el.classList.remove('paused');
      }
      setTimeout(function () {
        el.classList.remove('stress');
      }, 1000);
    });
  }
  function togglePause() {
    var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;
    gallery.setPaused(value);
  }
  function move(delta) {
    gallery.navigate(delta);
    // gallery.direction = "random" /* in order to change direction permanently, change "direction"-parameter instead */
  }

  window.startTheme = start;
  document.addEventListener("DOMContentLoaded", function () {
    start();
    document.querySelectorAll('button.topic').forEach(function (button) {
      return button.addEventListener("click", function () {
        return start(button.dataset.topic);
      });
    });
    document.querySelectorAll('.controls .button.toggle').forEach(function (button) {
      return button.addEventListener("click", function () {
        return togglePause();
      });
    });
    document.querySelectorAll('.controls .button.navi').forEach(function (button) {
      return button.addEventListener("click", function () {
        return move(button.dataset.target);
      });
    });
  });

})();
